<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>但行好事，莫问前程</title>
  
  <subtitle>Web Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://silencewh.xin/"/>
  <updated>2018-07-08T15:20:28.225Z</updated>
  <id>http://silencewh.xin/</id>
  
  <author>
    <name>silence_wh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拾起笔</title>
    <link href="http://silencewh.xin/2018/07/09/%E6%8B%BE%E8%B5%B7%E7%AC%94/"/>
    <id>http://silencewh.xin/2018/07/09/拾起笔/</id>
    <published>2018-07-08T23:17:15.000Z</published>
    <updated>2018-07-08T15:20:28.225Z</updated>
    
    <content type="html"><![CDATA[<p>说来惭愧，博客搭建起来之后，一直都没有认真的好好总结自己的技术学习，没有沉淀，博客上只有寥寥三篇文章。那三篇文章都好像是在嘲笑我的懒惰。</p><p>今天将自己2018年剩下的时间里好好总结了一下，希望自己不要再浑浑噩噩，按照自己的计划认真执行。</p><h2 id="英语学习计划"><a href="#英语学习计划" class="headerlink" title="英语学习计划"></a>英语学习计划</h2><p>目前在看一本书叫《程序员的英语》。主要形式是英语科技类文章的阅读、翻译和部分生词的解释。类似于读书时期的阅读理解，对于自己整体阅读的能力会有提高的作用。而我目前最需要的也是整体阅读能力，以及单词量的积累。</p><p>整本书一共33篇文章，目前已经阅读完两篇，剩下31篇。目前的计划是每天一篇文章，一个月将这本书阅读完。这样也算是前期给自己英语学习的一个“预热”。</p><p>接下来的计划是，在“众成翻译”网站上接一些难度较小，<em>自己感兴趣</em>的文章进行翻译，一定是要自己感兴趣的，否则很难坚持下去。前期计划是一周一篇。</p><p>其次每天日常的英语学习内容应该是阅读Medium上的一些文章，以自己感兴趣的为主。不求每个单词都能认识，但是要在阅读文章的过程中，培养自己的语感以及单词量的积累。</p><p>下载了扇贝单词APP，每天花个十几分钟左右的时间，或者是利用自己的一些碎屏时间，来记忆一些单词。为什么没有专门花时间来背单词？因为目前来说，一是可能没有那么多时间，二是单纯的背单词效果不是很好，而且很容易“学习疲劳”，因此目前还是以在阅读过程中积累单词为主。</p><h2 id="Python-入门学习计划"><a href="#Python-入门学习计划" class="headerlink" title="Python 入门学习计划"></a>Python 入门学习计划</h2><p>目前有《Python 编程从入门到实践》这本书，看书名就知道很靠谱，因为它不是叫“从入门到精通”。而且很多人都推荐这本书。我觉得我的 Python 入门学习的目标很明确，也很贴切对 Python 的第一印象，就是学会用 Python 写爬虫。</p><p>都说 Python 的语法很简单，上手容易，那么就需要多敲代码，避免眼高手低。因为理论学习只是第一步，可以将自己的想法写出来才是最重要的。</p><p>前期的计划是每两天花大概一个到两个小时的时间来学习Python，主要是看书和敲代码，平常需要关注一下 Python 的相关公众号，了解目前 Python 的应用场景都有哪些。</p><p>这本书读完之后，我想自己就可以用 Python 实现一些小程序了，但是关于整个工程的搭建和部署，以及一些框架的选择，都需要在 Github 上或者是社区里进行学习。</p><h2 id="前端学习计划"><a href="#前端学习计划" class="headerlink" title="前端学习计划"></a>前端学习计划</h2><p>前端技术是自己吃饭的本钱，也是带领自己走向编程这一领域的启蒙老师。近两年，前端开发还会是我的主要工作，我现在已经走过了最初的前端学习阶段，各个前端方面的知识也是略有涉及，但是接下来需要做的就是<em>弥补自己的短板和进阶自己的长处</em>。</p><p>反观自己在前端领域的学习过程，以及前段时间面试所暴露出来的问题，自己的学习方式还是有待改进的，至少需要提高自己的学习效率。</p><p>目前自己的短板是在CSS、移动端和Node方面。为什么把Node也加入到短板行列？因为一个合格的前端必须要熟练<br>Node。CSS以及移动端的短板和自己的兴趣点以及工作内容有关系。我自己本身对于CSS的热情不是很高，满足于实现基本的样式即可，没有深入探究或者是针对性的学习过。而移动端的短板主要是工作内容的侧重点还是偏向于PC端，而且即使有移动端的项目，要求也不是很高。这几点原因所导致的。</p><p>关于CSS和移动端的学习，我目前觉得《指尖上行》这本书比较适合我。这本书虽然是属于移动端开发的进阶读物，但是书中涉及到大量的复杂的样式、动画以及移动端的优化。所以我觉得这是我所需要的书籍。如果单纯的让我阅读CSS书籍，学习效率可能会很低。</p><p>自己本身更偏向于JS的学习和研究，也是自己的兴趣所在。关于JS的进阶学习，目前在看《你不知道的JavaScript（上卷）》。这本书是非常优秀的进阶书籍，书中讨论了很多JS中较复杂难懂，但是是必须要掌握的核心要点。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>希望计划”不止于计划“，自己要认真的去执行。更需要的是学习过程中要有沉淀和总结，希望自己慢慢地将这个博客充实起来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说来惭愧，博客搭建起来之后，一直都没有认真的好好总结自己的技术学习，没有沉淀，博客上只有寥寥三篇文章。那三篇文章都好像是在嘲笑我的懒惰。&lt;/p&gt;
&lt;p&gt;今天将自己2018年剩下的时间里好好总结了一下，希望自己不要再浑浑噩噩，按照自己的计划认真执行。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://silencewh.xin/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 项目服务端部署</title>
    <link href="http://silencewh.xin/2017/07/20/Node.js%20%E9%A1%B9%E7%9B%AE%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2/"/>
    <id>http://silencewh.xin/2017/07/20/Node.js 项目服务端部署/</id>
    <published>2017-07-19T17:37:35.000Z</published>
    <updated>2017-07-20T01:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-部署环境"><a href="#1-部署环境" class="headerlink" title="1. 部署环境"></a>1. 部署环境</h2><p>我是在阿里云上买的专有网络的云服务器，配置是：CPU 1核，内存 1GB，操作系统 CentOS 7.3 64位，带宽 1Mbps。配置很低，因为便宜嘛，平时自己的一些小 demo 够了。以下的部署步骤基于此环境。</p><p>之前部署过几次，都是在网络上东找找西找找的配置文章，本身对于服务器相关的知识一窍不通，因此配置完了也就忘了。最近刚在这台新服务器上部署了 Node 的运行环境，借此记录下步骤，以便日后查找，也给有需要的朋友一些参考价值。</p><h2 id="2-开始部署"><a href="#2-开始部署" class="headerlink" title="2. 开始部署"></a>2. 开始部署</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>我是在 Windows 下进行部署的，用的工具是 Xshell 5，下载地址在这：<a href="https://www.netsarang.com/download/down_xsh5.html" target="_blank" rel="noopener">https://www.netsarang.com/download/down_xsh5.html</a></p><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>在Xshell 5上输入服务器的IP、密码和用户，登录成功后如下图所示：</p><p><img src="https://silencewanghui.github.io/images/部署01.png" alt="部署01"></p><p>首先将 yum 更新至最新版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><p>安装编译源代码需要的一些开发工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development Tools&quot;</span><br></pre></td></tr></table></figure><h4 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h4><ol><li><p>先进入 /usr/src 文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/src</span><br></pre></td></tr></table></figure></li><li><p>从<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a>获取稳定版本，我选择的版本是 6.11.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v6.11.1/node-v6.11.1.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>下载完成之后，解压文件，并进入解压过后的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxf node-v6.11.1.tar.gz </span><br><span class="line">cd node-v6.11.1</span><br></pre></td></tr></table></figure></li><li><p>执行配置脚本来进行编译预处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure></li><li><p>编译源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>编译完成之后，开始安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>没有意外的话 Node 已经安装好了，可以敲出 node -v 来查看安装的版本号</p></li></ol><p>=============================我是分割线===================================</p><h4 id="使用-nvm-安装-Node（推荐）"><a href="#使用-nvm-安装-Node（推荐）" class="headerlink" title="使用 nvm 安装 Node（推荐）"></a>使用 nvm 安装 Node（推荐）</h4><ol><li><p>安装 nvm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</span><br></pre></td></tr></table></figure></li><li><p>执行以下命令以使用 nvm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure></li><li><p>安装 Node 最新的发布版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node</span><br></pre></td></tr></table></figure></li><li><p>使用 Node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm use node</span><br><span class="line">或者</span><br><span class="line">nvm run node --version (运行指定版本的 Node)</span><br></pre></td></tr></table></figure><p>具体使用请参照 nvm 的<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">官方文档</a></p></li></ol><p>Node 安装成功之后，可以再安装 <a href="http://pm2.keymetrics.io/" target="_blank" rel="noopener">pm2</a> ，用来启动和监控 Node 程序，并且可以在 Node 程序文件被替换和程序报错时，自动进行重启。</p><h4 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h4><ol><li><p>进入 /usr/local ，下载 <a href="https://www.mongodb.com/download-center?jmp=tutorials&amp;_ga=2.78479636.1260591818.1500450443-970533465.1498728612#community" target="_blank" rel="noopener">MongoDB</a> 源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.6.tgz</span><br></pre></td></tr></table></figure></li><li><p>解压安装包，重命名文件夹为mongodb3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf mongodb-linux-x86_64-3.4.6.tgz </span><br><span class="line">mv mongodb-linux-x86_64-3.4.6 mongodb3</span><br></pre></td></tr></table></figure></li><li><p>在 /usr/local 文件夹内建立 mongodata 文件夹，用于存放数据和日志以及配置文件（该位置可以自定义）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/mongodata</span><br><span class="line">mkdir /usr/local/mongodata/db</span><br><span class="line">mkdir /usr/local/mongodata/logs</span><br></pre></td></tr></table></figure></li><li><p>编辑配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/mongodata/mongo.conf</span><br></pre></td></tr></table></figure></li><li><p>将配置文件改为如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#端口号</span><br><span class="line">port=27017 </span><br><span class="line">#访问IP（这里设置成不限定）</span><br><span class="line">bind_ip=0.0.0.0</span><br><span class="line">#数据目录</span><br><span class="line">dbpath=/usr/local/mongodata/db</span><br><span class="line">#日志目录</span><br><span class="line">logpath=/usr/local/mongodata/logs</span><br><span class="line">#设置后台运行</span><br><span class="line">fork=true </span><br><span class="line">#日志输出方式</span><br><span class="line">logappend=true </span><br><span class="line">shardsvr=truedirectoryperdb=true</span><br><span class="line">#开启认证（暂时不开启）</span><br><span class="line">#auth=true</span><br></pre></td></tr></table></figure></li><li><p>进入到安装目录，启动运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mongod --config /usr/local/mongodata/mongo.conf</span><br></pre></td></tr></table></figure></li><li><p>打开数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mongo</span><br></pre></td></tr></table></figure></li><li><p>需要关闭数据库时，要执行以下语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure></li><li><p>配置账号密码，下面的 admin 用户的权限是 userAdminAnyDatabase</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">local  0.078GB</span><br><span class="line">test   0.078GB</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.createUser(</span><br><span class="line">...   &#123;</span><br><span class="line">...     user: &quot;admin&quot;,</span><br><span class="line">... pwd: &quot;admin&quot;,</span><br><span class="line">...     roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class="line">...   &#125;</span><br><span class="line">... )</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">    &quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&gt; show users</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : &quot;admin.admin&quot;,</span><br><span class="line">    &quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">    &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置完账号密码后，现在可以将配置文件中的认证放开了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#开启认证</span><br><span class="line">auth=true</span><br></pre></td></tr></table></figure></li><li><p>重启数据库，并增加账号 test1 对于 test 数据库，test1 的权限是 readWrite</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">./bin/mongo</span><br><span class="line">MongoDB shell version: 3.4.5</span><br><span class="line">connecting to: test</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.auth(&quot;admin&quot;,&quot;admin&quot;)</span><br><span class="line">1</span><br><span class="line">&gt; use test</span><br><span class="line">switched to db test</span><br><span class="line">db.createUser(</span><br><span class="line">... ...  &#123;</span><br><span class="line">... ...    user: &quot;test1&quot;,</span><br><span class="line">... ... pwd: &quot;test1&quot;,</span><br><span class="line">... ...    roles: [</span><br><span class="line">... ...       &#123; role: &quot;readWrite&quot;, db: &quot;test&quot; &#125;</span><br><span class="line">... ...    ]</span><br><span class="line">... ...  &#125;</span><br><span class="line">... ... )</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">    &quot;user&quot; : &quot;test1&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;readWrite&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;test&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>验证 test1 账号是否添加成功，返回1表示验证成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test</span><br><span class="line">&gt; db.auth(&apos;test1&apos;, &apos;test1&apos;)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>CentOS 开机启动，找到 /etc/rc.local，将下面这句话加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongodb3/bin/mongod --config /usr/local/mongodata/mongo.conf</span><br></pre></td></tr></table></figure></li><li><p>最后，需要在阿里云的控制台中找到安全组规则配置页面，将27017端口开放</p><p><img src="https://silencewanghui.github.io/images/部署02.png" alt="部署02"></p><p>推荐一款比较好用MongoDB客户端，<a href="https://mongobooster.com/" target="_blank" rel="noopener">mongobooster</a></p></li></ol><h4 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h4><ol><li><p>进入 /etc/yum.repos.d/，创建文件 nginx.repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d</span><br><span class="line">vi nginx.repo</span><br><span class="line">将下面的内容写入到 nginx.repo</span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure></li><li><p>安装完成之后，执行如下命令查看安装位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze2pp5x5s9w6jcr1ndxz /]# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz</span><br></pre></td></tr></table></figure></li><li><p>配置反向代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>将配置文件中的 server 选项如下配置</p><p><img src="https://silencewanghui.github.io/images/部署03.png" alt="部署03"></p><p>这里监听的是默认端口80，你也可以改成其他端口，不过切记，如果是云服务器的网络是专有网络，一定要在阿里云控制台配置对应端口的安全组规则。</p></li><li><p>开放防火墙中的某些端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看所有打开的端口</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p><img src="https://silencewanghui.github.io/images/部署04.png" alt="部署04"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#加入一个端口到区域</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=27017/tcp --permanent</span><br><span class="line">#加上 --permanent 表示永久生效，否则在服务器重启后改规则失效</span><br></pre></td></tr></table></figure></li><li><p>常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/nginx #启动Nginx服务</span><br><span class="line">/usr/sbin/nginx -s stop #关闭Nginx服务</span><br><span class="line">/usr/sbin/nginx -t #检测Nginx的配置文件是否正确</span><br><span class="line">/usr/sbin/nginx -s reload #重启Nginx服务</span><br><span class="line">/etc/nginx/nginx.conf #Nginx配置文件位置</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>至此，如果不出什么意外的话，Node + MongoDB + Nginx 的环境应该就部署好了，在此作为一个记录，也希望能够帮助到有此需求的朋友。</p><h2 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h2><ol><li>[<a href="https://segmentfault.com/a/1190000004051670" target="_blank" rel="noopener">把Node.js项目部署到阿里云服务器（CentOs）</a></li><li><a href="http://www.jianshu.com/p/c09342b7f64c" target="_blank" rel="noopener">centos6.5部署mongodb 3安装配置</a></li><li><a href="https://github.com/dwqs/blog/issues/6" target="_blank" rel="noopener">Node+React小爬虫：从开发到部署</a></li><li>[<a href="http://www.cnblogs.com/hantianwei/p/5736278.html" target="_blank" rel="noopener">Centos 7防火墙firewalld开放80端口</a>]</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-部署环境&quot;&gt;&lt;a href=&quot;#1-部署环境&quot; class=&quot;headerlink&quot; title=&quot;1. 部署环境&quot;&gt;&lt;/a&gt;1. 部署环境&lt;/h2&gt;&lt;p&gt;我是在阿里云上买的专有网络的云服务器，配置是：CPU 1核，内存 1GB，操作系统 CentOS 7.3
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://silencewh.xin/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>vue-plugin 学习笔记</title>
    <link href="http://silencewh.xin/2017/07/18/vue-plugin/"/>
    <id>http://silencewh.xin/2017/07/18/vue-plugin/</id>
    <published>2017-07-18T11:57:23.000Z</published>
    <updated>2017-08-14T02:10:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>简介部分的内容大部分摘自 <a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">Vue.js中文网</a>，因为我觉得官网的介绍十分精简，可以跳过以下的简介部分直接去官网查看。</p><h3 id="1-1-开发插件"><a href="#1-1-开发插件" class="headerlink" title="1.1 开发插件"></a>1.1 开发插件</h3><p>vue-plugin 属于 Vue 的插件范畴，通常会为 Vue  添加全局功能。插件的开发方式官网上提出一般为以下几种:</p><ol><li>添加全局方法或者属性，如: <a href="https://github.com/karol-f/vue-custom-element" target="_blank" rel="noopener">vue-element</a></li><li>添加全局资源：指令/过滤器/过渡等，如 <a href="https://github.com/vuejs/vue-touch" target="_blank" rel="noopener">vue-touch</a></li><li>通过全局 mixin方法添加一些组件选项，如: <a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">vuex</a></li><li>添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。</li><li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能，如 <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a></li></ol><p>在插件的实现方面，Vue.js 的插件应当有一个公开方法 install ，该方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象（官方示例）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或属性</span></span><br><span class="line">  Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  Vue.directive(<span class="string">'my-directive'</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-使用插件"><a href="#1-2-使用插件" class="headerlink" title="1.2 使用插件"></a>1.2 使用插件</h3><p>首先需要通过 npm 将所需要的插件源码下载到项目的 node_modules 文件夹内，再通过 require 或者是 import 的方式引入该插件。最后通过 Vue.use() 使用插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 `MyPlugin.install(Vue)`</span></span><br><span class="line">Vue.use(MyPlugin)</span><br></pre></td></tr></table></figure><p>也可以传入一个选项对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(MyPlugin, &#123; <span class="attr">someOption</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p>Vue.use 会自动阻止注册相同插件多次，届时只会注册一次该插件。</p><p>刚刚所说的使用插件的方式是在模块环境中，如果你是在页面中直接通过<script></script>引入插件的源码的，并且 Vue 是全局变量的情况下，一些插件（如 vue-router ）是会自动调用 Vue.use() 的。</p><h2 id="2-插件实例"><a href="#2-插件实例" class="headerlink" title="2. 插件实例"></a>2. 插件实例</h2><h3 id="2-1-vue-custom-element"><a href="#2-1-vue-custom-element" class="headerlink" title="2.1 vue-custom-element"></a>2.1 vue-custom-element</h3><p>GitHub 地址：<a href="https://github.com/karol-f/vue-custom-element" target="_blank" rel="noopener">https://github.com/karol-f/vue-custom-element</a></p><p>vue-custom-element 是通过在 Vue 上添加全局方法，以此让我们可以使用自定义的标签。</p><h6 id="Custom-Element-HTML"><a href="#Custom-Element-HTML" class="headerlink" title="Custom Element HTML"></a>Custom Element HTML</h6><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt;widget-vue prop1=&quot;1&quot; prop2=&quot;string&quot; prop3=&quot;true&quot;&gt;&lt;/widget-vue&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h6 id="JavaScript-register-with-Vue-custom-element"><a href="#JavaScript-register-with-Vue-custom-element" class="headerlink" title="JavaScript - register with Vue-custom-element"></a>JavaScript - register with Vue-custom-element</h6><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; Vue.customElement(&apos;widget-vue&apos;, &#123;</span><br><span class="line">&gt;   props: [</span><br><span class="line">&gt;     &apos;prop1&apos;,</span><br><span class="line">&gt;     &apos;prop2&apos;,</span><br><span class="line">&gt;     &apos;prop3&apos;</span><br><span class="line">&gt;   ],</span><br><span class="line">&gt;   data: &#123;</span><br><span class="line">&gt;     message: &apos;Hello Vue!&apos;</span><br><span class="line">&gt;   &#125;,</span><br><span class="line">&gt;   template: &apos;&lt;p&gt;&#123;&#123; message &#125;&#125;, &#123;&#123; prop1  &#125;&#125;, &#123;&#123;prop2&#125;&#125;, &#123;&#123;prop3&#125;&#125;&lt;/p&gt;&apos;</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h6 id="JavaScript-element-API-usage"><a href="#JavaScript-element-API-usage" class="headerlink" title="JavaScript - element API usage"></a>JavaScript - element API usage</h6><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; document.querySelector(&apos;widget-vue&apos;)[0].prop2 // get prop value</span><br><span class="line">&gt; document.querySelector(&apos;widget-vue&apos;)[0].prop2 = &apos;another string&apos; // set prop value</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>You can also change <code>&lt;widget-vue&gt;</code> HTML attributes and changes will be instantly reflected.</p></blockquote><p>上面是引用自 vue-custom-element 的 GitHub 上面的 README。</p><p>再看一下 vue-custom-element 中的一些代码片段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> registerCustomElement <span class="keyword">from</span> <span class="string">'./utils/registerCustomElement'</span>;</span><br><span class="line"><span class="keyword">import</span> createVueInstance <span class="keyword">from</span> <span class="string">'./utils/createVueInstance'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getProps, convertAttributeValue &#125; <span class="keyword">from</span> <span class="string">'./utils/props'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; camelize &#125; <span class="keyword">from</span> <span class="string">'./utils/helpers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.customElement = <span class="function"><span class="keyword">function</span> <span class="title">vueCustomElement</span>(<span class="params">tag, componentDefinition, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isAsyncComponent = <span class="keyword">typeof</span> componentDefinition === <span class="string">'function'</span>;</span><br><span class="line">    <span class="keyword">const</span> optionsProps = isAsyncComponent &amp;&amp; &#123; <span class="attr">props</span>: options.props || [] &#125;;</span><br><span class="line">    <span class="keyword">const</span> props = getProps(isAsyncComponent ? optionsProps : componentDefinition);</span><br><span class="line">    <span class="comment">// register Custom Element</span></span><br><span class="line">    <span class="keyword">const</span> CustomElement = registerCustomElement(tag, &#123;</span><br><span class="line">      constructorCallback() &#123;</span><br><span class="line">        <span class="keyword">typeof</span> options.constructorCallback === <span class="string">'function'</span> &amp;&amp; options.constructorCallback.call(<span class="keyword">this</span>);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      connectedCallback() &#123;</span><br><span class="line">        <span class="keyword">const</span> asyncComponentPromise = isAsyncComponent &amp;&amp; componentDefinition();</span><br><span class="line">        <span class="keyword">const</span> isAsyncComponentPromise = asyncComponentPromise &amp;&amp; asyncComponentPromise.then &amp;&amp; <span class="keyword">typeof</span> asyncComponentPromise.then === <span class="string">'function'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isAsyncComponent &amp;&amp; !isAsyncComponentPromise) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Async component <span class="subst">$&#123;tag&#125;</span> do not returns Promise`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.__detached__) &#123;</span><br><span class="line">          <span class="keyword">if</span> (isAsyncComponentPromise) &#123;</span><br><span class="line">            asyncComponentPromise.then(<span class="function">(<span class="params">lazyLoadedComponent</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> lazyLoadedComponentProps = getProps(lazyLoadedComponent);</span><br><span class="line">              createVueInstance(<span class="keyword">this</span>, Vue, lazyLoadedComponent, lazyLoadedComponentProps, options);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            createVueInstance(<span class="keyword">this</span>, Vue, componentDefinition, props, options);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.__detached__ = <span class="literal">false</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">......</span><br><span class="line">      </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> install;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">  <span class="built_in">window</span>.Vue.use(install);</span><br><span class="line">  <span class="keyword">if</span> (install.installed) &#123;</span><br><span class="line">    install.installed = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 vue-custom-element 在 Vue 上添加了一个 customElement 的全局方法，并且暴露了 install 方法接收 Vue 的构造器。最后通过检查是否存在 Vue 全局变量，来调用 Vue.use() 实现插件的注册。</p><h3 id="2-2-vue-touch"><a href="#2-2-vue-touch" class="headerlink" title="2.2 vue-touch"></a>2.2 vue-touch</h3><p>GitHub 地址：<a href="https://github.com/vuejs/vue-touch" target="_blank" rel="noopener">https://github.com/vuejs/vue-touch</a></p><p>vue-touch 是一个在 Vue 项目中使用的对于 touch 事件处理的库，它是基于 Hammer.js 2.0 。</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h4 id="Using-the-v-touch-directive"><a href="#Using-the-v-touch-directive" class="headerlink" title="Using the v-touch directive"></a>Using the <code>v-touch</code> directive</h4><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt;a v-touch:tap=&quot;onTap&quot;&gt;Tap me!&lt;/a&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; &lt;div v-touch:swipeleft=&quot;onSwipeLeft&quot;&gt;Swipe me!&lt;/div&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="Configuring-Recognizer-Options"><a href="#Configuring-Recognizer-Options" class="headerlink" title="Configuring Recognizer Options"></a>Configuring Recognizer Options</h4><blockquote><p>There are two ways to customize recognizer options such as <code>direction</code> and <code>threshold</code>. The first one is setting global options:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; // change the threshold for all swipe recognizers</span><br><span class="line">&gt; VueTouch.config.swipe = &#123;</span><br><span class="line">&gt;   threshold: 200</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>Or, you can use the <code>v-touch-options</code> directive to configure the behavior on a specific element:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt;!-- detect only horizontal pans with a threshold of 100 --&gt;</span><br><span class="line">&gt; &lt;a</span><br><span class="line">&gt;   v-touch:pan=&quot;onPan&quot;</span><br><span class="line">&gt;   v-touch-options:pan=&quot;&#123; direction: &apos;horizontal&apos;, threshold: 100 &#125;&quot;&gt;</span><br><span class="line">&gt; &lt;/a&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Registering-Custom-Events"><a href="#Registering-Custom-Events" class="headerlink" title="Registering Custom Events"></a>Registering Custom Events</h4><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; // example registering a custom doubletap event.</span><br><span class="line">&gt; // the `type` indicates the base recognizer to use from Hammer</span><br><span class="line">&gt; // all other options are Hammer recognizer options.</span><br><span class="line">&gt; VueTouch.registerCustomEvent(&apos;doubletap&apos;, &#123;</span><br><span class="line">&gt;   type: &apos;tap&apos;,</span><br><span class="line">&gt;   taps: 2</span><br><span class="line">&gt; &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt;a v-touch:doubletap=&quot;onDoubleTap&quot;&gt;&lt;/a&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>See <a href="http://hammerjs.github.io/getting-started/" target="_blank" rel="noopener">Hammer.js documentation</a> for all available events.<br>See <code>/example</code> for a multi-event demo. To build it, run <code>npm install &amp;&amp; npm run build</code>.</p></blockquote><p>上面是引用自 vue-touch 的 README.</p><p>下面是一些代码片段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">vueTouch.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    Vue.directive(<span class="string">'touch'</span>, &#123;</span><br><span class="line"></span><br><span class="line">      isFn: <span class="literal">true</span>,</span><br><span class="line">      acceptStatement: <span class="literal">true</span>,</span><br><span class="line">      priority: Vue.directive(<span class="string">'on'</span>).priority,</span><br><span class="line"></span><br><span class="line">      bind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.el.hammer) &#123;</span><br><span class="line">          <span class="keyword">this</span>.el.hammer = <span class="keyword">new</span> Hammer.Manager(<span class="keyword">this</span>.el)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> mc = <span class="keyword">this</span>.mc = <span class="keyword">this</span>.el.hammer</span><br><span class="line">        <span class="comment">// determine event type</span></span><br><span class="line">        <span class="keyword">var</span> event = <span class="keyword">this</span>.arg</span><br><span class="line">        <span class="keyword">if</span> (!event) &#123;</span><br><span class="line">          <span class="built_in">console</span>.warn(<span class="string">'[vue-touch] event type argument is required.'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> recognizerType, recognizer</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (customEvents[event]) &#123;</span><br><span class="line">          <span class="comment">// custom event</span></span><br><span class="line">          <span class="keyword">var</span> custom = customEvents[event]</span><br><span class="line">          recognizerType = custom.type</span><br><span class="line">          recognizer = <span class="keyword">new</span> Hammer[capitalize(recognizerType)](custom)</span><br><span class="line">          recognizer.recognizeWith(mc.recognizers)</span><br><span class="line">          mc.add(recognizer)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// built-in event</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; gestures.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.indexOf(gestures[i]) === <span class="number">0</span>) &#123;</span><br><span class="line">              recognizerType = gestures[i]</span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (!recognizerType) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'[vue-touch] invalid event type: '</span> + event)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          recognizer = mc.get(recognizerType)</span><br><span class="line">          <span class="keyword">if</span> (!recognizer) &#123;</span><br><span class="line">            <span class="comment">// add recognizer</span></span><br><span class="line">            recognizer = <span class="keyword">new</span> Hammer[capitalize(recognizerType)]()</span><br><span class="line">            <span class="comment">// make sure multiple recognizers work together...</span></span><br><span class="line">            recognizer.recognizeWith(mc.recognizers)</span><br><span class="line">            mc.add(recognizer)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// apply global options</span></span><br><span class="line">          <span class="keyword">var</span> globalOptions = vueTouch.config[recognizerType]</span><br><span class="line">          <span class="keyword">if</span> (globalOptions) &#123;</span><br><span class="line">            guardDirections(globalOptions)</span><br><span class="line">            recognizer.set(globalOptions)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// apply local options</span></span><br><span class="line">          <span class="keyword">var</span> localOptions =</span><br><span class="line">            <span class="keyword">this</span>.el.hammerOptions &amp;&amp;</span><br><span class="line">            <span class="keyword">this</span>.el.hammerOptions[recognizerType]</span><br><span class="line">          <span class="keyword">if</span> (localOptions) &#123;</span><br><span class="line">            guardDirections(localOptions)</span><br><span class="line">            recognizer.set(localOptions)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.recognizer = recognizer</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      update: <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> mc = <span class="keyword">this</span>.mc</span><br><span class="line">        <span class="keyword">var</span> event = <span class="keyword">this</span>.arg</span><br><span class="line">        <span class="comment">// teardown old handler</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handler) &#123;</span><br><span class="line">          mc.off(event, <span class="keyword">this</span>.handler)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.handler = <span class="literal">null</span></span><br><span class="line">          <span class="built_in">console</span>.warn(</span><br><span class="line">            <span class="string">'[vue-touch] invalid handler function for v-touch: '</span> +</span><br><span class="line">            <span class="keyword">this</span>.arg + <span class="string">'="'</span> + <span class="keyword">this</span>.descriptor.raw</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          mc.on(event, (<span class="keyword">this</span>.handler = fn))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      unbind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handler) &#123;</span><br><span class="line">          <span class="keyword">this</span>.mc.off(<span class="keyword">this</span>.arg, <span class="keyword">this</span>.handler)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.mc.handlers).length) &#123;</span><br><span class="line">          <span class="keyword">this</span>.mc.destroy()</span><br><span class="line">          <span class="keyword">this</span>.el.hammer = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.directive(<span class="string">'touch-options'</span>, &#123;</span><br><span class="line">      priority: Vue.directive(<span class="string">'on'</span>).priority + <span class="number">1</span>,</span><br><span class="line">      update: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> opts = <span class="keyword">this</span>.el.hammerOptions || (<span class="keyword">this</span>.el.hammerOptions = &#123;&#125;)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.arg) &#123;</span><br><span class="line">          <span class="built_in">console</span>.warn(<span class="string">'[vue-touch] recognizer type argument for v-touch-options is required.'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          opts[<span class="keyword">this</span>.arg] = options</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>其中用到了 Vue 中关于自定义指令的部分。自定义指令主要是在我们需要对 DOM 进行一些直接操作时所用的方法，指令定义函数提供了几个钩子函数（可选）：</p><ul><li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li><li><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li><li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li></ul><p>这些钩子函数会被传入一些参数，以便我们对所绑定元素进行一些 DOM 操作和 对虚拟节点的一些数据操作。详细的参数如下：</p><ul><li><p><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 DOM 。</p></li><li><p>binding</p><p>: 一个对象，包含以下属性：</p><ul><li><strong>name</strong>: 指令名，不包括 <code>v-</code> 前缀。</li><li><strong>value</strong>: 指令的绑定值， 例如： <code>v-my-directive=&quot;1 + 1&quot;</code>, value 的值是 <code>2</code>。</li><li><strong>oldValue</strong>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><strong>expression</strong>: 绑定值的字符串形式。 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> ， expression 的值是 <code>&quot;1 + 1&quot;</code>。</li><li><strong>arg</strong>: 传给指令的参数。例如 <code>v-my-directive:foo</code>， arg 的值是 <code>&quot;foo&quot;</code>。</li><li><strong>modifiers</strong>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 modifiers 的值是 <code>{ foo: true, bar: true }</code>。</li></ul></li><li><p><strong>vnode</strong>: Vue 编译生成的虚拟节点，查阅 <a href="https://cn.vuejs.org/v2/api/#VNode接口" target="_blank" rel="noopener">VNode API</a> 了解更多详情。</p></li><li><p><strong>oldVnode</strong>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</p></li></ul><h3 id="2-3-vuex"><a href="#2-3-vuex" class="headerlink" title="2.3 vuex"></a>2.3 vuex</h3><p>GitHub 地址：<a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">https://github.com/vuejs/vuex</a></p><p>vuex 为 Vue.js 应用提供了一个集中式状态管理的解决方案，几乎是大中型 Vue 应用的必备解决方案。它采用的是通过全局 mixin 方法添加一些组件选项。以下是截取的一个源码片段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> version = <span class="built_in">Number</span>(Vue.version.split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (version &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    Vue.mixin(&#123; <span class="attr">beforeCreate</span>: vuexInit &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// override init and inject vuex init procedure</span></span><br><span class="line">    <span class="comment">// for 1.x backwards compatibility.</span></span><br><span class="line">    <span class="keyword">const</span> _init = Vue.prototype._init</span><br><span class="line">    Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">      options.init = options.init</span><br><span class="line">        ? [vuexInit].concat(options.init)</span><br><span class="line">        : vuexInit</span><br><span class="line">      _init.call(<span class="keyword">this</span>, options)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Vuex init hook, injected into each instances init hooks list.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">vuexInit</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</span><br><span class="line">    <span class="comment">// store injection</span></span><br><span class="line">    <span class="keyword">if</span> (options.store) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store = <span class="keyword">typeof</span> options.store === <span class="string">'function'</span></span><br><span class="line">        ? options.store()</span><br><span class="line">        : options.store</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store = options.parent.$store</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中用到了 Vue 插件的一种实现方式：<a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">mixin（混合）</a></p><blockquote><p>混合是一种灵活的分布式复用 Vue 组件的方式。混合对象可以包含任意组件选项。以组件使用混合对象时，所有混合对象的选项将被混入该组件本身的选项。</p></blockquote><p>官网的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个混合对象</span></span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello from mixin!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个使用混合对象的组件</span></span><br><span class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</span><br><span class="line">  mixins: [myMixin]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> Component() <span class="comment">// -&gt; "hello from mixin!"</span></span><br></pre></td></tr></table></figure><p>从某种层面上来讲，混合可以理解成是组件的代码片段，它和组件进行混用的时候有一些特殊的合并规则。</p><h4 id="2-3-1-选项合并"><a href="#2-3-1-选项合并" class="headerlink" title="2.3.1 选项合并"></a>2.3.1 选项合并</h4><blockquote><p>当组件和混合对象含有同名选项时，这些选项将以恰当的方式混合。比如，同名钩子函数将混合为一个数组，因此都将被调用。另外，混合对象的 钩子将在组件自身钩子 <strong>之前</strong> 调用 。</p></blockquote><p>官网的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'混合对象的钩子被调用'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'组件钩子被调用'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// -&gt; "混合对象的钩子被调用"</span></span><br><span class="line"><span class="comment">// -&gt; "组件钩子被调用"</span></span><br></pre></td></tr></table></figure><blockquote><p>值为对象的选项，例如 <code>methods</code>, <code>components</code> 和 <code>directives</code>，将被混合为同一个对象。 两个对象键名冲突时，取组件对象的键值对。</p></blockquote><p>官网的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'foo'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    conflicting: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'from mixin'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'bar'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    conflicting: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'from self'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.foo() <span class="comment">// -&gt; "foo"</span></span><br><span class="line">vm.bar() <span class="comment">// -&gt; "bar"</span></span><br><span class="line">vm.conflicting() <span class="comment">// -&gt; "from self"</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-全局混合"><a href="#2-3-2-全局混合" class="headerlink" title="2.3.2 全局混合"></a>2.3.2 全局混合</h4><blockquote><p>也可以全局注册混合对象。 注意使用！ 一旦使用全局混合对象，将会影响到 <strong>所有</strong> 之后创建的 Vue 实例。使用恰当时，可以为自定义对象注入处理逻辑。</p></blockquote><p>官网的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为自定义的选项 'myOption' 注入一个处理器。 </span></span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myOption = <span class="keyword">this</span>.$options.myOption</span><br><span class="line">    <span class="keyword">if</span> (myOption) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(myOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  myOption: <span class="string">'hello!'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// -&gt; "hello!"</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-自定义混合策略"><a href="#2-3-3-自定义混合策略" class="headerlink" title="2.3.3 自定义混合策略"></a>2.3.3 自定义混合策略</h4><p>这种混合方式不是很明白，以下是官方文档：</p><blockquote><p>自定义选项混合策略<br>自定义选项将使用默认策略，即简单地覆盖已有值。 如果想让自定义选项以自定义逻辑混合，可以向 <code>Vue.config.optionMergeStrategies</code> 添加一个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Vue.config.optionMergeStrategies.myOption = function (toVal, fromVal) &#123;</span><br><span class="line">&gt;   // return mergedVal</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>对于大多数对象选项，可以使用 <code>methods</code> 的合并策略:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; var strategies = Vue.config.optionMergeStrategies</span><br><span class="line">&gt; strategies.myOption = strategies.methods</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>更多高级的例子可以在 <a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">Vuex</a> 1.x的混合策略里找到:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; const merge = Vue.config.optionMergeStrategies.computed</span><br><span class="line">&gt; Vue.config.optionMergeStrategies.vuex = function (toVal, fromVal) &#123;</span><br><span class="line">&gt;   if (!toVal) return fromVal</span><br><span class="line">&gt;   if (!fromVal) return toVal</span><br><span class="line">&gt;   return &#123;</span><br><span class="line">&gt;     getters: merge(toVal.getters, fromVal.getters),</span><br><span class="line">&gt;     state: merge(toVal.state, fromVal.state),</span><br><span class="line">&gt;     actions: merge(toVal.actions, fromVal.actions)</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>关于 mixin 的使用姿势，请阅读这篇文章：<a href="http://zcfy.cc/article/using-mixins-in-vue-js-css-tricks-3257.html?t=new" target="_blank" rel="noopener">在 Vue.js 中使用Mixin —— CSS-Tricks</a></p><h3 id="2-4-vue-router"><a href="#2-4-vue-router" class="headerlink" title="2.4 vue-router"></a>2.4 vue-router</h3><p>GitHub 地址：<a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">https://github.com/vuejs/vue-router</a></p><p>vue-router 是 Vue 应用官方推荐的路由解决方案，与 Vue.js 结合去构建单页应用。</p><p>截取了一小段源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    beforeCreate () &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123;</span><br><span class="line">        <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router</span><br><span class="line">        <span class="keyword">this</span>._router.init(<span class="keyword">this</span>)</span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>, <span class="string">'_route'</span>, <span class="keyword">this</span>._router.history.current)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._routerRoot = (<span class="keyword">this</span>.$parent &amp;&amp; <span class="keyword">this</span>.$parent._routerRoot) || <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed () &#123;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$router'</span>, &#123;</span><br><span class="line">    get () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._router &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$route'</span>, &#123;</span><br><span class="line">    get () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._route &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Vue.component(<span class="string">'router-view'</span>, View)</span><br><span class="line">  Vue.component(<span class="string">'router-link'</span>, Link)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> strats = Vue.config.optionMergeStrategies</span><br><span class="line">  <span class="comment">// use the same hook merging strategy for route hooks</span></span><br><span class="line">  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created</span><br></pre></td></tr></table></figure><p>可以看到 vue-rouer 在 Vue.prototype 上面添加了自定义的对象，这只是其中能够体现 vue-router 扩展插件的一小部分，vue-rouer 用到了文章上部分讲的开发插件的各种方式。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要是简单介绍了关于 Vue 插件的基本概念以及其实现的几种形式，内容大部分摘自 <a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue.js 中文网</a>。</p><p>关于插件的理解，个人觉得主要是从实践中去进行理解，因此，本文主要是做概念上的简单介绍。<br>学习时写了个很小的 <a href="https://github.com/Silencewanghui/vue-plugin-demo" target="_blank" rel="noopener">demo</a> 作为练习。</p><p><img src="https://silencewanghui.github.io/images/WX.jpg" alt="微信赞赏"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;简介部分的内容大部分摘自 &lt;a href=&quot;https://cn.vuejs.org/v2/guide/plugins.
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://silencewh.xin/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>防抖动、节流阀与rAF</title>
    <link href="http://silencewh.xin/2017/06/19/%E9%98%B2%E6%8A%96%E5%8A%A8%E3%80%81%E8%8A%82%E6%B5%81%E9%98%80%E4%B8%8ErAF/"/>
    <id>http://silencewh.xin/2017/06/19/防抖动、节流阀与rAF/</id>
    <published>2017-06-19T14:57:18.000Z</published>
    <updated>2017-06-19T07:01:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>在 web 开发中，经常会对一些事件进行监听处理，从而达到我们需要的一些效果。但是某些事件触发特别频繁，如浏览器窗口的 resize 事件以及页面的滚动事件。如此频繁的事件监听以及处理函数的多次执行，势必会带来性能上不必要的损失和欠佳的用户体验。</p><p>因此，今天就初探一下类似问题的解决办法：防抖动（Debounce ）、节流阀（Throttle）和 requestAnimationFrame。</p><h4 id="2-防抖动（Debounce）"><a href="#2-防抖动（Debounce）" class="headerlink" title="2.防抖动（Debounce）"></a>2.防抖动（Debounce）</h4><p>简单来说，防抖动技术就是把触发非常频繁的事件合并成一次执行。</p><p>先看一下代码实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeID = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 首先是清空定时器</span></span><br><span class="line">    clearTimeout(timeID);</span><br><span class="line">    <span class="comment">// 延迟 wait ms后执行真正的事件处理函数</span></span><br><span class="line">    timeID = setTimeOut(func, wait);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hanlder</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hanlde the scroll event.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounce(hanlder, <span class="number">400</span>));</span><br></pre></td></tr></table></figure><p>简要解释一下，如果在400ms内连续触发 scroll 事件，那么真正的事件处理是不会执行的。只有当快速的事件触发停止以后，处理函数才会执行，也就是说 debounce 函数将多次的事件触发合并成了一次。</p><h4 id="3-节流阀（Throttle）"><a href="#3-节流阀（Throttle）" class="headerlink" title="3.节流阀（Throttle）"></a>3.节流阀（Throttle）</h4><p>节流函数，只允许一个函数在规定的时间内执行一次。</p><p>它和防抖动最大的区别就是，节流函数是不管事件触发有多频繁，都会保证在规定事件内必须执行一次真正的事件处理函数。因此，有些场景下，就不能够使用防抖动技术，转而用节流阀代替。</p><p>比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流阀技术来实现。代码实例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span> (<span class="params">func, wait</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout,</span><br><span class="line">      context,</span><br><span class="line">      args,</span><br><span class="line">      startTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> curTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    <span class="keyword">var</span> remaining = wait - (curTime - startTime);</span><br><span class="line">    context = <span class="keyword">this</span>;</span><br><span class="line">    args = <span class="built_in">arguments</span>;</span><br><span class="line">    </span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(remaining &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">      startTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      timeout = setTimeout(func, remaining);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-requestAnimationFrame"><a href="#4-requestAnimationFrame" class="headerlink" title="4.requestAnimationFrame"></a>4.requestAnimationFrame</h4><blockquote><p><strong>window.requestAnimationFrame() </strong>方法告诉浏览器您希望执行动画，并请求浏览器调用指定的函数在下一次重绘之前更新动画。该方法将在重绘之前调用的回调作为参数。</p><p>如果你想做逐帧动画的时候，你应该用这个方法。这就要求你的动画函数执行会先于浏览器重绘动作。通常来说，被调用的频率是每秒60次，但是一般会遵循W3C标准规定的频率。如果是后台标签页面，重绘频率则会大大降低。</p></blockquote><p>代码实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">timeStamp</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 执行动画一帧所需要的计算工作</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">requestAnimationFrame(update)</span><br></pre></td></tr></table></figure><p>回调函数会被传入一个时间戳作为参数，该参数指示出回调函数将被触发的时间。</p><p>简单来说 rAF 会在浏览器渲染的下一帧执行动画所需的计算操作，而且执行的频率与显示器的刷新率保持一致，</p><p>这样就避免了我们使用定时器时由于指定的间隔时间太长或太短引起的动画掉帧或卡顿的问题。</p><p>浏览器兼容方面，IE 10.0及以上支持。</p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><p>第一次写博客，自我感觉对于技术的剖析很浅，没有达到自己理想的效果。慢慢来吧，再接再厉，参考文章列表里的都是一些非常优秀的文章，大家可以仔细阅读。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="https://github.com/chokcoco/cnblogsArticle/issues/12" target="_blank" rel="noopener">【前端性能】高性能滚动 scroll 及页面渲染优化</a></li><li><a href="http://jinlong.github.io/2016/04/24/Debouncing-and-Throttling-Explained-Through-Examples/" target="_blank" rel="noopener">实例解析防抖动（Debouncing）和节流阀（Throttling）</a></li><li><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering" target="_blank" rel="noopener">Javascript高性能动画与页面渲染</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h4&gt;&lt;p&gt;在 web 开发中，经常会对一些事件进行监听处理，从而达到我们需要的一些效果。但是某些事件触发特别频繁，如浏览器窗口的 re
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://silencewh.xin/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>First One</title>
    <link href="http://silencewh.xin/2017/06/08/First-One/"/>
    <id>http://silencewh.xin/2017/06/08/First-One/</id>
    <published>2017-06-07T16:18:28.000Z</published>
    <updated>2017-06-07T08:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客初始搭建完成，以后会在这里写一些技术上的知识学习以及工作中的踩坑记录。<br>Keep Moving.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博客初始搭建完成，以后会在这里写一些技术上的知识学习以及工作中的踩坑记录。&lt;br&gt;Keep Moving.&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="随笔" scheme="http://silencewh.xin/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
