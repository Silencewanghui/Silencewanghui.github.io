<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>但行好事，莫问前程</title>
  
  <subtitle>Web Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://silencewh.xin/"/>
  <updated>2019-12-23T03:34:22.820Z</updated>
  <id>http://silencewh.xin/</id>
  
  <author>
    <name>silence_wh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器工作原理学习笔记(一)-浏览器概览</title>
    <link href="http://silencewh.xin/2019/12/23/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A6%82%E8%A7%88/"/>
    <id>http://silencewh.xin/2019/12/23/浏览器工作原理学习笔记-一-浏览器概览/</id>
    <published>2019-12-23T11:31:30.000Z</published>
    <updated>2019-12-23T03:34:22.820Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本系列为极客时间上的<a href="https://time.geekbang.org/column/intro/216" target="_blank" rel="noopener">《浏览器工作原理与实践》</a>专栏的学习笔记</p></blockquote><h2 id="浏览器架构变迁"><a href="#浏览器架构变迁" class="headerlink" title="浏览器架构变迁"></a>浏览器架构变迁</h2><p>起初浏览器为单进程架构，页面、插件、网络等其他模块都在一个进程下面工作（多个线程），只要有一个线程出现问题，就会导致整个浏览器崩溃。这种架构不稳定、不安全、不流畅。如下图所示：</p><a id="more"></a><p><img src="http://i2.tiimg.com/706472/df649e67d5a3094d.png" alt="Markdown"></p><p>后面架构升级为多进程架构，分为渲染进程、插件进程、网络进程、GPU 进程和浏览器主进程。每个页面和插件都有自己单独的进程，保证了独立性，互不影响，单个页面或者插件出问题之后，不会影响到整个浏览器，将其关闭就好。而且渲染进程被隔离在沙箱内，保证了系统的安全性。如下图所示：</p><p><img src="http://i2.tiimg.com/706472/3deb725de2d333fa.png" alt="Markdown"></p><p>未来浏览器的架构方向是面向服务的架构，也就是将浏览器的底层能力划分为一个个基础服务，每个服务在独立的进程内运行，互相通过 IPC 通信。构建一个更内聚、低耦合、易于扩展和维护的系统。如下图所示：</p><p><img src="http://i2.tiimg.com/706472/19383820160b6f33.png" alt="Markdown"></p><h2 id="浏览器数据包传输"><a href="#浏览器数据包传输" class="headerlink" title="浏览器数据包传输"></a>浏览器数据包传输</h2><p>互联网的数据是通过数据包来传输的。如果发送的的数据过大，会拆分成一个个小的数据包进行传输，浏览器的网络传输是基于 TCP/IP 协议簇进行。</p><p>IP 协议位于网络层，主要的职责是将数据从一个主机地址传输到另一个主机地址，这里的主机地址就是指的 IP。传输方式是在基础数据包的基础上加上 IP 头信息，里面包含了源 IP 地址、目标 IP 地址等信息。</p><p>UDP （用户数据包协议），负责将应用程序通过端口号与网络数据包连接起来。IP 接收到数据包之后，UDP 通过端口号将数据包分发给对应的应用程序。UDP 的特点是：传输速度快，但是不保证传输可靠性（会丢包）。</p><p>TCP 协议是一个可靠、稳定、面向连接的传输层协议，它解决了 UDP 的缺点，特点如下：</p><ul><li><p>提供重传机制，解决丢包的问题</p></li><li><p>大的数据包会拆分成若干个小数据包，接收端收到之后再按照序号拼接</p></li></ul><p>一个完整的 TCP 生命周期包括：建立连接（三次握手）、数据传输、断开连接（四次挥手）</p><h3 id="一个完整的-HTTP-请求过程"><a href="#一个完整的-HTTP-请求过程" class="headerlink" title="一个完整的 HTTP 请求过程"></a>一个完整的 HTTP 请求过程</h3><ol><li>构建请求<ul><li>构建请求行信息</li></ul></li><li>查找缓存<ul><li>页面数据本地缓存</li><li>缓存对应头字段：Cache-Control，不同的值带来不同的缓存生命周期</li></ul></li><li>准备 IP 地址和端口<ul><li>IP 地址通过 DNS 查询获取，并且会优先查找本地的 DNS 缓存</li></ul></li><li>等待 TCP 队列<ul><li>Chrome 对于每个域名只能分配 6 个 TCP 连接</li></ul></li><li>建立 TCP 连接</li><li>发送 HTTP 请求<ul><li>请求行、请求头、请求体</li><li>如有对应的 Cookie ，会携带，用于持久化登录态</li></ul></li><li>等到服务端 HTTP 响应<ul><li>响应行、响应头、响应体</li></ul></li><li>断开连接/重定向<ul><li>如果 HTTP 状态码为 301 或 302 ，浏览器需要重定向到另一个地址访问</li></ul></li></ol><h2 id="从输入-URL-到页面展示完整"><a href="#从输入-URL-到页面展示完整" class="headerlink" title="从输入 URL 到页面展示完整"></a>从输入 URL 到页面展示完整</h2><h3 id="导航阶段"><a href="#导航阶段" class="headerlink" title="导航阶段"></a>导航阶段</h3><p>流程示意图：</p><p><img src="http://i2.tiimg.com/706472/a72269e27885564d.png" alt="Markdown"></p><ol><li><p>用户输入请求信息</p></li><li><p>网络进程发起 URL 请求</p></li><li><p>服务器响应之后，浏览器进程开始准备渲染进程</p></li></ol><ul><li>如果 HTTP 响应码是 301 或者是 302 ，浏览器会有一个重定向的过程</li><li>响应头中的 Content-Type 决定浏览器如何处理响应内容，影响着后续流程，如果是 HTML 页面，那么 Content-Type 的值应该是 text/html</li><li>每打开一个页面，浏览器都会准备一个新的进程，有一种情况例外，就是新打开的页面和之前的页面属于<strong>同一站点</strong>时，这时候会复用前一个进程</li></ul><ol><li><p>渲染进程准备好之后，就会通知浏览器进程已经做好展示页面状态的准备，这个过程称为“<strong>提交文档</strong>”</p></li><li><p>浏览器进程接收到提交文档的消息后，便会移除旧的文档，同时通知渲染进程文档已提交，渲染进程进入<strong>解析页面</strong>阶段</p><p><strong>这个过程就叫做 “导航”</strong></p></li></ol><h3 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h3><p><img src="http://i2.tiimg.com/706472/d2877702697009e6.png" alt="Markdown"></p><p>按照渲染的时间顺序，渲染流水线可以分为如下几个子阶段：</p><p>构建 DOM 树 =&gt; 样式计算 =&gt; 布局阶段 =&gt; 分层 =&gt; 绘制 =&gt; 分块 =&gt; 光栅化 =&gt; 合成</p><p>每个子阶段都可以看成是一个函数，接收输入参数，进行本阶段的处理，然后输出相应的处理结果给下一个子阶段。多个子阶段构成一条渲染流水线。</p><h4 id="1-构建-DOM-树"><a href="#1-构建-DOM-树" class="headerlink" title="1. 构建 DOM 树"></a>1. 构建 DOM 树</h4><p>将简单的 HTML 代码，经由解析器解析，最终转换为一个树状结构，包含节点和内容，方便接下来流程的处理。</p><h4 id="2-样式计算"><a href="#2-样式计算" class="headerlink" title="2. 样式计算"></a>2. 样式计算</h4><ul><li><p>为了将 CSS 文件转换成浏览器能够理解的结构，先要进行一步<strong>转换</strong>的操作，解析 CSS 文件，输出 styleSheets</p></li><li><p>接下来是将<strong>CSS 的属性值标准化</strong></p></li><li>然后根据 CSS 继承和层叠的规则，计算每个 DOM 节点的样式</li></ul><h4 id="3-布局阶段"><a href="#3-布局阶段" class="headerlink" title="3. 布局阶段"></a>3. 布局阶段</h4><p>计算 DOM 树中<strong>可见节点</strong>的几何位置的过程，就叫做布局。</p><ul><li>创建布局树，构建一棵只包含可见元素的布局树</li><li>布局计算，计算 DOM 树节点的坐标位置</li></ul><h4 id="4-分层"><a href="#4-分层" class="headerlink" title="4. 分层"></a>4. 分层</h4><p>为了完成页面很多复杂的效果，渲染引擎会为一些特定的节点生成对应的图层，最终形成一棵图层树。满足以下两点中的任意一点都会形成一个对应的图层：</p><ul><li>拥有层叠上下文属性（定位属性、透明度定义、CSS 滤镜）</li><li>需要裁剪的地方（内容溢出容器，就会发生裁剪）</li></ul><h4 id="5-图层绘制"><a href="#5-图层绘制" class="headerlink" title="5. 图层绘制"></a>5. 图层绘制</h4><p>图层的绘制会被分解成一个个绘制指令，形成绘制列表</p><h4 id="6-栅格化（raster）操作"><a href="#6-栅格化（raster）操作" class="headerlink" title="6. 栅格化（raster）操作"></a>6. 栅格化（raster）操作</h4><p>当图层的绘制列表准备好之后，渲染线程的主线程会将绘制列表提交（commit）给合成线程。</p><p>合成线程将图层划分为图块，视口附近的图块会被优先转化为位图，生成位图的操作是由栅格化来进行的。栅格化，就是将图块转换为位图。</p><p>渲染引擎维护了一个栅格化的线程池，所有的图块栅格化都是在线程池中进行的。</p><p>一般栅格化线程都会由 GPU 来加速进行，生成的位图会保存在 GPU 的内存中。</p><p><img src="http://i2.tiimg.com/706472/b1c45068aee33d99.png" alt="Markdown"></p><h4 id="7-合成和显示"><a href="#7-合成和显示" class="headerlink" title="7. 合成和显示"></a>7. 合成和显示</h4><p>所有的图块光栅化之后，合成线程会发出一个绘制图块的命令-“DrawQuad”，提交给浏览器进程。</p><p>浏览器进程里有一个叫 viz 的组件，用来接收 DrawQuad 命令，根据这个命令，将页面内容绘制到内存中，最后再显示在屏幕上。</p><p>至此，用户就可以看见最终的页面了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本系列为极客时间上的&lt;a href=&quot;https://time.geekbang.org/column/intro/216&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《浏览器工作原理与实践》&lt;/a&gt;专栏的学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;浏览器架构变迁&quot;&gt;&lt;a href=&quot;#浏览器架构变迁&quot; class=&quot;headerlink&quot; title=&quot;浏览器架构变迁&quot;&gt;&lt;/a&gt;浏览器架构变迁&lt;/h2&gt;&lt;p&gt;起初浏览器为单进程架构，页面、插件、网络等其他模块都在一个进程下面工作（多个线程），只要有一个线程出现问题，就会导致整个浏览器崩溃。这种架构不稳定、不安全、不流畅。如下图所示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://silencewh.xin/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>拾起笔</title>
    <link href="http://silencewh.xin/2018/07/09/%E6%8B%BE%E8%B5%B7%E7%AC%94/"/>
    <id>http://silencewh.xin/2018/07/09/拾起笔/</id>
    <published>2018-07-08T23:17:15.000Z</published>
    <updated>2019-11-27T10:25:29.942Z</updated>
    
    <content type="html"><![CDATA[<p>说来惭愧，博客搭建起来之后，一直都没有认真的好好总结自己的技术学习，没有沉淀，博客上只有寥寥三篇文章。那三篇文章都好像是在嘲笑我的懒惰。</p><p>今天将自己 2018 年剩下的时间里好好总结了一下，希望自己不要再浑浑噩噩，按照自己的计划认真执行。</p><a id="more"></a><h2 id="英语学习计划"><a href="#英语学习计划" class="headerlink" title="英语学习计划"></a>英语学习计划</h2><p>目前在看一本书叫《程序员的英语》。主要形式是英语科技类文章的阅读、翻译和部分生词的解释。类似于读书时期的阅读理解，对于自己整体阅读的能力会有提高的作用。而我目前最需要的也是整体阅读能力，以及单词量的积累。</p><p>整本书一共 33 篇文章，目前已经阅读完两篇，剩下 31 篇。目前的计划是每天一篇文章，一个月将这本书阅读完。这样也算是前期给自己英语学习的一个“预热”。</p><p>接下来的计划是，在“众成翻译”网站上接一些难度较小，<em>自己感兴趣</em>的文章进行翻译，一定是要自己感兴趣的，否则很难坚持下去。前期计划是一周一篇。</p><p>其次每天日常的英语学习内容应该是阅读 Medium 上的一些文章，以自己感兴趣的为主。不求每个单词都能认识，但是要在阅读文章的过程中，培养自己的语感以及单词量的积累。</p><p>下载了扇贝单词 APP，每天花个十几分钟左右的时间，或者是利用自己的一些碎屏时间，来记忆一些单词。为什么没有专门花时间来背单词？因为目前来说，一是可能没有那么多时间，二是单纯的背单词效果不是很好，而且很容易“学习疲劳”，因此目前还是以在阅读过程中积累单词为主。</p><h2 id="Python-入门学习计划"><a href="#Python-入门学习计划" class="headerlink" title="Python 入门学习计划"></a>Python 入门学习计划</h2><p>目前有《Python 编程从入门到实践》这本书，看书名就知道很靠谱，因为它不是叫“从入门到精通”。而且很多人都推荐这本书。我觉得我的 Python 入门学习的目标很明确，也很贴切对 Python 的第一印象，就是学会用 Python 写爬虫。</p><p>都说 Python 的语法很简单，上手容易，那么就需要多敲代码，避免眼高手低。因为理论学习只是第一步，可以将自己的想法写出来才是最重要的。</p><p>前期的计划是每两天花大概一个到两个小时的时间来学习 Python，主要是看书和敲代码，平常需要关注一下 Python 的相关公众号，了解目前 Python 的应用场景都有哪些。</p><p>这本书读完之后，我想自己就可以用 Python 实现一些小程序了，但是关于整个工程的搭建和部署，以及一些框架的选择，都需要在 Github 上或者是社区里进行学习。</p><h2 id="前端学习计划"><a href="#前端学习计划" class="headerlink" title="前端学习计划"></a>前端学习计划</h2><p>前端技术是自己吃饭的本钱，也是带领自己走向编程这一领域的启蒙老师。近两年，前端开发还会是我的主要工作，我现在已经走过了最初的前端学习阶段，各个前端方面的知识也是略有涉及，但是接下来需要做的就是<em>弥补自己的短板和进阶自己的长处</em>。</p><p>反观自己在前端领域的学习过程，以及前段时间面试所暴露出来的问题，自己的学习方式还是有待改进的，至少需要提高自己的学习效率。</p><p>目前自己的短板是在 CSS、移动端和 Node 方面。为什么把 Node 也加入到短板行列？因为一个合格的前端必须要熟 Node。CSS 以及移动端的短板和自己的兴趣点以及工作内容有关系。我自己本身对于 CSS 的热情不是很高，满足于实现基本的样式即可，没有深入探究或者是针对性的学习过。而移动端的短板主要是工作内容的侧重点还是偏向于 PC 端，而且即使有移动端的项目，要求也不是很高。这几点原因所导致的。</p><p>关于 CSS 和移动端的学习，我目前觉得《指尖上行》这本书比较适合我。这本书虽然是属于移动端开发的进阶读物，但是书中涉及到大量的复杂的样式、动画以及移动端的优化。所以我觉得这是我所需要的书籍。如果单纯的让我阅读 CSS 书籍，学习效率可能会很低。</p><p>自己本身更偏向于 JS 的学习和研究，也是自己的兴趣所在。关于 JS 的进阶学习，目前在看《你不知道的 JavaScript（上卷）》。这本书是非常优秀的进阶书籍，书中讨论了很多 JS 中较复杂难懂，但是是必须要掌握的核心要点。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望计划”不止于计划“，自己要认真的去执行。更需要的是学习过程中要有沉淀和总结，希望自己慢慢地将这个博客充实起来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说来惭愧，博客搭建起来之后，一直都没有认真的好好总结自己的技术学习，没有沉淀，博客上只有寥寥三篇文章。那三篇文章都好像是在嘲笑我的懒惰。&lt;/p&gt;
&lt;p&gt;今天将自己 2018 年剩下的时间里好好总结了一下，希望自己不要再浑浑噩噩，按照自己的计划认真执行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://silencewh.xin/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 项目服务端部署</title>
    <link href="http://silencewh.xin/2017/07/20/Node.js%20%E9%A1%B9%E7%9B%AE%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2/"/>
    <id>http://silencewh.xin/2017/07/20/Node.js 项目服务端部署/</id>
    <published>2017-07-19T17:37:35.000Z</published>
    <updated>2019-11-27T10:24:24.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-部署环境"><a href="#1-部署环境" class="headerlink" title="1. 部署环境"></a>1. 部署环境</h2><p>我是在阿里云上买的专有网络的云服务器，配置是：CPU 1 核，内存 1GB，操作系统 CentOS 7.3 64 位，带宽 1Mbps。配置很低，因为便宜嘛，平时自己的一些小 demo 够了。以下的部署步骤基于此环境。</p><p>之前部署过几次，都是在网络上东找找西找找的配置文章，本身对于服务器相关的知识一窍不通，因此配置完了也就忘了。最近刚在这台新服务器上部署了 Node 的运行环境，借此记录下步骤，以便日后查找，也给有需要的朋友一些参考价值。</p><a id="more"></a><h2 id="2-开始部署"><a href="#2-开始部署" class="headerlink" title="2. 开始部署"></a>2. 开始部署</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>我是在 Windows 下进行部署的，用的工具是 Xshell 5，下载地址在这：<a href="https://www.netsarang.com/download/down_xsh5.html" target="_blank" rel="noopener">https://www.netsarang.com/download/down_xsh5.html</a></p><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>在 Xshell 5 上输入服务器的 IP、密码和用户，登录成功后如下图所示：</p><p><img src="https://silencewanghui.github.io/images/部署01.png" alt="部署01"></p><p>首先将 yum 更新至最新版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><p>安装编译源代码需要的一些开发工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development Tools&quot;</span><br></pre></td></tr></table></figure><h4 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h4><ol><li><p>先进入 /usr/src 文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/src</span><br></pre></td></tr></table></figure></li><li><p>从<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a>获取稳定版本，我选择的版本是 6.11.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v6.11.1/node-v6.11.1.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>下载完成之后，解压文件，并进入解压过后的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxf node-v6.11.1.tar.gz</span><br><span class="line">cd node-v6.11.1</span><br></pre></td></tr></table></figure></li><li><p>执行配置脚本来进行编译预处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure></li><li><p>编译源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>编译完成之后，开始安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>没有意外的话 Node 已经安装好了，可以敲出 node -v 来查看安装的版本号</p></li></ol><p>=============================我是分割线===================================</p><h4 id="使用-nvm-安装-Node（推荐）"><a href="#使用-nvm-安装-Node（推荐）" class="headerlink" title="使用 nvm 安装 Node（推荐）"></a>使用 nvm 安装 Node（推荐）</h4><ol><li><p>安装 nvm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</span><br></pre></td></tr></table></figure></li><li><p>执行以下命令以使用 nvm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure></li><li><p>安装 Node 最新的发布版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node</span><br></pre></td></tr></table></figure></li><li><p>使用 Node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm use node</span><br><span class="line">或者</span><br><span class="line">nvm run node --version (运行指定版本的 Node)</span><br></pre></td></tr></table></figure><p>具体使用请参照 nvm 的<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">官方文档</a></p></li></ol><p>Node 安装成功之后，可以再安装 <a href="http://pm2.keymetrics.io/" target="_blank" rel="noopener">pm2</a> ，用来启动和监控 Node 程序，并且可以在 Node 程序文件被替换和程序报错时，自动进行重启。</p><h4 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h4><ol><li><p>进入 /usr/local ，下载 <a href="https://www.mongodb.com/download-center?jmp=tutorials&amp;_ga=2.78479636.1260591818.1500450443-970533465.1498728612#community" target="_blank" rel="noopener">MongoDB</a> 源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.6.tgz</span><br></pre></td></tr></table></figure></li><li><p>解压安装包，重命名文件夹为 mongodb3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf mongodb-linux-x86_64-3.4.6.tgz</span><br><span class="line">mv mongodb-linux-x86_64-3.4.6 mongodb3</span><br></pre></td></tr></table></figure></li><li><p>在 /usr/local 文件夹内建立 mongodata 文件夹，用于存放数据和日志以及配置文件（该位置可以自定义）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/mongodata</span><br><span class="line">mkdir /usr/local/mongodata/db</span><br><span class="line">mkdir /usr/local/mongodata/logs</span><br></pre></td></tr></table></figure></li><li><p>编辑配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/mongodata/mongo.conf</span><br></pre></td></tr></table></figure></li><li><p>将配置文件改为如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#端口号</span><br><span class="line">port=27017</span><br><span class="line">#访问IP（这里设置成不限定）</span><br><span class="line">bind_ip=0.0.0.0</span><br><span class="line">#数据目录</span><br><span class="line">dbpath=/usr/local/mongodata/db</span><br><span class="line">#日志目录</span><br><span class="line">logpath=/usr/local/mongodata/logs</span><br><span class="line">#设置后台运行</span><br><span class="line">fork=true</span><br><span class="line">#日志输出方式</span><br><span class="line">logappend=true</span><br><span class="line">shardsvr=truedirectoryperdb=true</span><br><span class="line">#开启认证（暂时不开启）</span><br><span class="line">#auth=true</span><br></pre></td></tr></table></figure></li><li><p>进入到安装目录，启动运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mongod --config /usr/local/mongodata/mongo.conf</span><br></pre></td></tr></table></figure></li><li><p>打开数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mongo</span><br></pre></td></tr></table></figure></li><li><p>需要关闭数据库时，要执行以下语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure></li><li><p>配置账号密码，下面的 admin 用户的权限是 userAdminAnyDatabase</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">local  0.078GB</span><br><span class="line">test   0.078GB</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.createUser(</span><br><span class="line">...   &#123;</span><br><span class="line">...     user: &quot;admin&quot;,</span><br><span class="line">... pwd: &quot;admin&quot;,</span><br><span class="line">...     roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class="line">...   &#125;</span><br><span class="line">... )</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">    &quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&gt; show users</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : &quot;admin.admin&quot;,</span><br><span class="line">    &quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">    &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置完账号密码后，现在可以将配置文件中的认证放开了</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#开启认证</span><br><span class="line">auth=true</span><br></pre></td></tr></table></figure><ol><li><p>重启数据库，并增加账号 test1 对于 test 数据库，test1 的权限是 readWrite</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">./bin/mongo</span><br><span class="line">MongoDB shell version: 3.4.5</span><br><span class="line">connecting to: test</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.auth(&quot;admin&quot;,&quot;admin&quot;)</span><br><span class="line">1</span><br><span class="line">&gt; use test</span><br><span class="line">switched to db test</span><br><span class="line">db.createUser(</span><br><span class="line">... ...  &#123;</span><br><span class="line">... ...    user: &quot;test1&quot;,</span><br><span class="line">... ... pwd: &quot;test1&quot;,</span><br><span class="line">... ...    roles: [</span><br><span class="line">... ...       &#123; role: &quot;readWrite&quot;, db: &quot;test&quot; &#125;</span><br><span class="line">... ...    ]</span><br><span class="line">... ...  &#125;</span><br><span class="line">... ... )</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">    &quot;user&quot; : &quot;test1&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;readWrite&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;test&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>验证 test1 账号是否添加成功，返回 1 表示验证成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test</span><br><span class="line">&gt; db.auth(&apos;test1&apos;, &apos;test1&apos;)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>CentOS 开机启动，找到 /etc/rc.local，将下面这句话加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongodb3/bin/mongod --config /usr/local/mongodata/mongo.conf</span><br></pre></td></tr></table></figure></li><li><p>最后，需要在阿里云的控制台中找到安全组规则配置页面，将 27017 端口开放</p><p><img src="https://silencewanghui.github.io/images/部署02.png" alt="部署02"></p><p>推荐一款比较好用 MongoDB 客户端，<a href="https://mongobooster.com/" target="_blank" rel="noopener">mongobooster</a></p></li></ol><h4 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h4><ol><li><p>进入 /etc/yum.repos.d/，创建文件 nginx.repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d</span><br><span class="line">vi nginx.repo</span><br><span class="line">将下面的内容写入到 nginx.repo</span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure></li><li><p>安装完成之后，执行如下命令查看安装位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze2pp5x5s9w6jcr1ndxz /]# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz</span><br></pre></td></tr></table></figure></li><li><p>配置反向代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>将配置文件中的 server 选项如下配置</p><p><img src="https://silencewanghui.github.io/images/部署03.png" alt="部署03"></p><p>这里监听的是默认端口 80，你也可以改成其他端口，不过切记，如果是云服务器的网络是专有网络，一定要在阿里云控制台配置对应端口的安全组规则。</p></li><li><p>开放防火墙中的某些端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看所有打开的端口</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p><img src="https://silencewanghui.github.io/images/部署04.png" alt="部署04"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#加入一个端口到区域</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=27017/tcp --permanent</span><br><span class="line">#加上 --permanent 表示永久生效，否则在服务器重启后改规则失效</span><br></pre></td></tr></table></figure></li><li><p>常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/nginx #启动Nginx服务</span><br><span class="line">/usr/sbin/nginx -s stop #关闭Nginx服务</span><br><span class="line">/usr/sbin/nginx -t #检测Nginx的配置文件是否正确</span><br><span class="line">/usr/sbin/nginx -s reload #重启Nginx服务</span><br><span class="line">/etc/nginx/nginx.conf #Nginx配置文件位置</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>至此，如果不出什么意外的话，Node + MongoDB + Nginx 的环境应该就部署好了，在此作为一个记录，也希望能够帮助到有此需求的朋友。</p><h2 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h2><ol><li>[<a href="https://segmentfault.com/a/1190000004051670" target="_blank" rel="noopener">把 Node.js 项目部署到阿里云服务器（CentOs）</a></li><li><a href="http://www.jianshu.com/p/c09342b7f64c" target="_blank" rel="noopener">centos6.5 部署 mongodb 3 安装配置</a></li><li><a href="https://github.com/dwqs/blog/issues/6" target="_blank" rel="noopener">Node+React 小爬虫：从开发到部署</a></li><li>[<a href="http://www.cnblogs.com/hantianwei/p/5736278.html" target="_blank" rel="noopener">Centos 7 防火墙 firewalld 开放 80 端口</a>]</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-部署环境&quot;&gt;&lt;a href=&quot;#1-部署环境&quot; class=&quot;headerlink&quot; title=&quot;1. 部署环境&quot;&gt;&lt;/a&gt;1. 部署环境&lt;/h2&gt;&lt;p&gt;我是在阿里云上买的专有网络的云服务器，配置是：CPU 1 核，内存 1GB，操作系统 CentOS 7.3 64 位，带宽 1Mbps。配置很低，因为便宜嘛，平时自己的一些小 demo 够了。以下的部署步骤基于此环境。&lt;/p&gt;
&lt;p&gt;之前部署过几次，都是在网络上东找找西找找的配置文章，本身对于服务器相关的知识一窍不通，因此配置完了也就忘了。最近刚在这台新服务器上部署了 Node 的运行环境，借此记录下步骤，以便日后查找，也给有需要的朋友一些参考价值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://silencewh.xin/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>防抖动、节流阀与rAF</title>
    <link href="http://silencewh.xin/2017/06/19/%E9%98%B2%E6%8A%96%E5%8A%A8%E3%80%81%E8%8A%82%E6%B5%81%E9%98%80%E4%B8%8ErAF/"/>
    <id>http://silencewh.xin/2017/06/19/防抖动、节流阀与rAF/</id>
    <published>2017-06-19T14:57:18.000Z</published>
    <updated>2019-11-27T10:24:33.414Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>在 web 开发中，经常会对一些事件进行监听处理，从而达到我们需要的一些效果。但是某些事件触发特别频繁，如浏览器窗口的 resize 事件以及页面的滚动事件。如此频繁的事件监听以及处理函数的多次执行，势必会带来性能上不必要的损失和欠佳的用户体验。</p><p>因此，今天就初探一下类似问题的解决办法：防抖动（Debounce ）、节流阀（Throttle）和 requestAnimationFrame。</p><a id="more"></a><h4 id="2-防抖动（Debounce）"><a href="#2-防抖动（Debounce）" class="headerlink" title="2.防抖动（Debounce）"></a>2.防抖动（Debounce）</h4><p>简单来说，防抖动技术就是把触发非常频繁的事件合并成一次执行。</p><p>先看一下代码实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeID = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 首先是清空定时器</span></span><br><span class="line">    clearTimeout(timeID);</span><br><span class="line">    <span class="comment">// 延迟 wait ms后执行真正的事件处理函数</span></span><br><span class="line">    timeID = setTimeOut(func, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hanlder</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hanlde the scroll event."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, debounce(hanlder, <span class="number">400</span>));</span><br></pre></td></tr></table></figure><p>简要解释一下，如果在 400ms 内连续触发 scroll 事件，那么真正的事件处理是不会执行的。只有当快速的事件触发停止以后，处理函数才会执行，也就是说 debounce 函数将多次的事件触发合并成了一次。</p><h4 id="3-节流阀（Throttle）"><a href="#3-节流阀（Throttle）" class="headerlink" title="3.节流阀（Throttle）"></a>3.节流阀（Throttle）</h4><p>节流函数，只允许一个函数在规定的时间内执行一次。</p><p>它和防抖动最大的区别就是，节流函数是不管事件触发有多频繁，都会保证在规定事件内必须执行一次真正的事件处理函数。因此，有些场景下，就不能够使用防抖动技术，转而用节流阀代替。</p><p>比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流阀技术来实现。代码实例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout,</span><br><span class="line">    context,</span><br><span class="line">    args,</span><br><span class="line">    startTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> curTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    <span class="keyword">var</span> remaining = wait - (curTime - startTime);</span><br><span class="line">    context = <span class="keyword">this</span>;</span><br><span class="line">    args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">      startTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = setTimeout(func, remaining);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-requestAnimationFrame"><a href="#4-requestAnimationFrame" class="headerlink" title="4.requestAnimationFrame"></a>4.requestAnimationFrame</h4><blockquote><p><strong>window.requestAnimationFrame() </strong>方法告诉浏览器您希望执行动画，并请求浏览器调用指定的函数在下一次重绘之前更新动画。该方法将在重绘之前调用的回调作为参数。</p><p>如果你想做逐帧动画的时候，你应该用这个方法。这就要求你的动画函数执行会先于浏览器重绘动作。通常来说，被调用的频率是每秒 60 次，但是一般会遵循 W3C 标准规定的频率。如果是后台标签页面，重绘频率则会大大降低。</p></blockquote><p>代码实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">timeStamp</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 执行动画一帧所需要的计算工作</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">requestAnimationFrame(update)</span><br></pre></td></tr></table></figure><p>回调函数会被传入一个时间戳作为参数，该参数指示出回调函数将被触发的时间。</p><p>简单来说 rAF 会在浏览器渲染的下一帧执行动画所需的计算操作，而且执行的频率与显示器的刷新率保持一致，</p><p>这样就避免了我们使用定时器时由于指定的间隔时间太长或太短引起的动画掉帧或卡顿的问题。</p><p>浏览器兼容方面，IE 10.0 及以上支持。</p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><p>第一次写博客，自我感觉对于技术的剖析很浅，没有达到自己理想的效果。慢慢来吧，再接再厉，参考文章列表里的都是一些非常优秀的文章，大家可以仔细阅读。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="https://github.com/chokcoco/cnblogsArticle/issues/12" target="_blank" rel="noopener">【前端性能】高性能滚动 scroll 及页面渲染优化</a></li><li><a href="http://jinlong.github.io/2016/04/24/Debouncing-and-Throttling-Explained-Through-Examples/" target="_blank" rel="noopener">实例解析防抖动（Debouncing）和节流阀（Throttling）</a></li><li><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering" target="_blank" rel="noopener">Javascript 高性能动画与页面渲染</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h4&gt;&lt;p&gt;在 web 开发中，经常会对一些事件进行监听处理，从而达到我们需要的一些效果。但是某些事件触发特别频繁，如浏览器窗口的 resize 事件以及页面的滚动事件。如此频繁的事件监听以及处理函数的多次执行，势必会带来性能上不必要的损失和欠佳的用户体验。&lt;/p&gt;
&lt;p&gt;因此，今天就初探一下类似问题的解决办法：防抖动（Debounce ）、节流阀（Throttle）和 requestAnimationFrame。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://silencewh.xin/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>First One</title>
    <link href="http://silencewh.xin/2017/06/08/First-One/"/>
    <id>http://silencewh.xin/2017/06/08/First-One/</id>
    <published>2017-06-07T16:18:28.000Z</published>
    <updated>2017-06-07T08:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客初始搭建完成，以后会在这里写一些技术上的知识学习以及工作中的踩坑记录。<br>Keep Moving.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博客初始搭建完成，以后会在这里写一些技术上的知识学习以及工作中的踩坑记录。&lt;br&gt;Keep Moving.&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="随笔" scheme="http://silencewh.xin/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
