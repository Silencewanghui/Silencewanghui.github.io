<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>但行好事，莫问前程</title>
  <subtitle>Web Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-19T09:38:56.047Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>silence_wh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 CentOS 7.3 64位机器上部署 Node、MongoDB 与 Nginx</title>
    <link href="http://yoursite.com/2017/07/20/%E5%9C%A8%20CentOS%207.3%2064%E4%BD%8D%E6%9C%BA%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2%20Node%E3%80%81MongoDB%20%E4%B8%8E%20Nginx/"/>
    <id>http://yoursite.com/2017/07/20/在 CentOS 7.3 64位机器上部署 Node、MongoDB 与 Nginx/</id>
    <published>2017-07-19T17:37:35.000Z</published>
    <updated>2017-07-19T09:38:56.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-部署环境"><a href="#1-部署环境" class="headerlink" title="1. 部署环境"></a>1. 部署环境</h2><p>我是在阿里云上以极低的价格（9元–半年）买的专有网络的云服务器，配置是：CPU 1核，内存 1GB，操作系统 CentOS 7.3 64位，带宽 1Mbps。配置很低，因为便宜嘛，平时自己的一些小 demo 够了。以下的部署步骤基于此环境。</p>
<p>之前部署过几次，都是在网络上东找找西找找的配置文章，本身对于服务器相关的知识一窍不通，因此配置完了也就忘了。最近刚在这台新服务器上部署了 Node 的运行环境，借此记录下步骤，以便日后查找，也给有需要的朋友一些参考价值。</p>
<h2 id="2-开始部署"><a href="#2-开始部署" class="headerlink" title="2. 开始部署"></a>2. 开始部署</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>我是在 Windows 下进行部署的，用的工具是 Xshell 5，下载地址在这：<a href="https://www.netsarang.com/download/down_xsh5.html" target="_blank" rel="external">https://www.netsarang.com/download/down_xsh5.html</a></p>
<h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>在Xshell 5上输入服务器的IP、密码和用户，登录成功后如下图所示：</p>
<p><img src="https://silencewanghui.github.io/images/部署01.png" alt="部署01"></p>
<p>首先将yum更新至最新版本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y update</div></pre></td></tr></table></figure>
<p>安装编译源代码需要的一些开发工具：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y groupinstall &quot;Development Tools&quot;</div></pre></td></tr></table></figure>
<h4 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h4><ol>
<li><p>先进入 /usr/src 文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/src</div></pre></td></tr></table></figure>
</li>
<li><p>从<a href="https://nodejs.org/en/download/" target="_blank" rel="external">官网</a>获取稳定版本，我选择的版本是 6.11.1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://nodejs.org/dist/v6.11.1/node-v6.11.1.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>下载完成之后，解压文件，并进入解压过后的文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar zxf node-v6.11.1.tar.gz </div><div class="line">cd node-v6.11.1</div></pre></td></tr></table></figure>
</li>
<li><p>执行配置脚本来进行编译预处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure</div></pre></td></tr></table></figure>
</li>
<li><p>编译源代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make</div></pre></td></tr></table></figure>
</li>
<li><p>编译完成之后，开始安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make install</div></pre></td></tr></table></figure>
</li>
<li><p>没有意外的话 Node 已经安装好了，可以敲出 node -v 来查看安装的版本号</p>
</li>
</ol>
<p>=============================我是分割线===================================</p>
<h4 id="推荐使用-nvm-安装-Node"><a href="#推荐使用-nvm-安装-Node" class="headerlink" title="推荐使用 nvm 安装 Node"></a>推荐使用 nvm 安装 Node</h4><ol>
<li><p>安装 nvm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</div></pre></td></tr></table></figure>
</li>
<li><p>执行以下命令以使用 nvm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</div></pre></td></tr></table></figure>
</li>
<li><p>安装 Node 最新的发布版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install node</div></pre></td></tr></table></figure>
</li>
<li><p>使用 Node</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nvm use node</div><div class="line">或者</div><div class="line">nvm run node --version (运行指定版本的 Node)</div></pre></td></tr></table></figure>
<p>具体使用请参照 nvm 的<a href="https://github.com/creationix/nvm" target="_blank" rel="external">官方文档</a></p>
</li>
</ol>
<h4 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h4><ol>
<li><p>进入 /usr/local ，下载 <a href="https://www.mongodb.com/download-center?jmp=tutorials&amp;_ga=2.78479636.1260591818.1500450443-970533465.1498728612#community" target="_blank" rel="external">MongoDB</a> 源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local</div><div class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.6.tgz</div></pre></td></tr></table></figure>
</li>
<li><p>解压安装包，重命名文件夹为mongodb3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar zxvf mongodb-linux-x86_64-3.4.6.tgz </div><div class="line">mv mongodb-linux-x86_64-3.4.6 mongodb3</div></pre></td></tr></table></figure>
</li>
<li><p>在 /usr/local 文件夹内建立 mongodata 文件夹，用于存放数据和日志以及配置文件（该位置可以自定义）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir /usr/local/mongodata</div><div class="line">mkdir /usr/local/mongodata/db</div><div class="line">mkdir /usr/local/mongodata/logs</div></pre></td></tr></table></figure>
</li>
<li><p>编辑配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/mongodata/mongo.conf</div></pre></td></tr></table></figure>
</li>
<li><p>将配置文件改为如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#端口号</div><div class="line">port=27017 </div><div class="line">#访问IP（这里设置成不限定）</div><div class="line">bind_ip=0.0.0.0</div><div class="line">#数据目录</div><div class="line">dbpath=/usr/local/mongodata/db</div><div class="line">#日志目录</div><div class="line">logpath=/usr/local/mongodata/logs</div><div class="line">#设置后台运行</div><div class="line">fork=true </div><div class="line">#日志输出方式</div><div class="line">logappend=true </div><div class="line">shardsvr=truedirectoryperdb=true</div><div class="line">#开启认证（暂时不开启）</div><div class="line">#auth=true</div></pre></td></tr></table></figure>
</li>
<li><p>进入到安装目录，启动运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/mongod --config /usr/local/mongodata/mongo.conf</div></pre></td></tr></table></figure>
</li>
<li><p>打开数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/mongo</div></pre></td></tr></table></figure>
</li>
<li><p>需要关闭数据库时，要执行以下语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.shutdownServer()</div></pre></td></tr></table></figure>
</li>
<li><p>配置账号密码，下面的 admin 用户的权限是 userAdminAnyDatabase</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&gt; show dbs</div><div class="line">local  0.078GB</div><div class="line">test   0.078GB</div><div class="line">&gt; use admin</div><div class="line">switched to db admin</div><div class="line">&gt; db.createUser(</div><div class="line">...   &#123;</div><div class="line">...     user: &quot;admin&quot;,</div><div class="line">... 	pwd: &quot;admin&quot;,</div><div class="line">...     roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</div><div class="line">...   &#125;</div><div class="line">... )</div><div class="line">Successfully added user: &#123;</div><div class="line">    &quot;user&quot; : &quot;admin&quot;,</div><div class="line">    &quot;roles&quot; : [</div><div class="line">        &#123;</div><div class="line">            &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</div><div class="line">            &quot;db&quot; : &quot;admin&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line">&gt; show users</div><div class="line">&#123;</div><div class="line">    &quot;_id&quot; : &quot;admin.admin&quot;,</div><div class="line">    &quot;user&quot; : &quot;admin&quot;,</div><div class="line">    &quot;db&quot; : &quot;admin&quot;,</div><div class="line">    &quot;roles&quot; : [</div><div class="line">        &#123;</div><div class="line">            &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</div><div class="line">            &quot;db&quot; : &quot;admin&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配置完账号密码后，现在可以将配置文件中的认证放开了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#开启认证</div><div class="line">auth=true</div></pre></td></tr></table></figure>
</li>
<li><p>重启数据库，并增加账号 test1 对于 test 数据库，test1 的权限是 readWrite</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">./bin/mongo</div><div class="line">MongoDB shell version: 3.4.5</div><div class="line">connecting to: test</div><div class="line">&gt; use admin</div><div class="line">switched to db admin</div><div class="line">&gt; db.auth(&quot;admin&quot;,&quot;admin&quot;)</div><div class="line">1</div><div class="line">&gt; use test</div><div class="line">switched to db test</div><div class="line">db.createUser(</div><div class="line">... ...  &#123;</div><div class="line">... ...    	user: &quot;test1&quot;,</div><div class="line">... ... 	pwd: &quot;test1&quot;,</div><div class="line">... ...    	roles: [</div><div class="line">... ...       &#123; role: &quot;readWrite&quot;, db: &quot;test&quot; &#125;</div><div class="line">... ...    	]</div><div class="line">... ...  &#125;</div><div class="line">... ... )</div><div class="line">Successfully added user: &#123;</div><div class="line">    &quot;user&quot; : &quot;test1&quot;,</div><div class="line">    &quot;roles&quot; : [</div><div class="line">        &#123;</div><div class="line">            &quot;role&quot; : &quot;readWrite&quot;,</div><div class="line">            &quot;db&quot; : &quot;test&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>验证 test1 账号是否添加成功，返回1表示验证成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; use test</div><div class="line">&gt; db.auth(&apos;test1&apos;, &apos;test1&apos;)</div><div class="line">1</div></pre></td></tr></table></figure>
</li>
<li><p>CentOS 开机启动，找到 /etc/rc.local，将下面这句话加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/mongodb3/bin/mongod --config /usr/local/mongodata/mongo.conf</div></pre></td></tr></table></figure>
</li>
<li><p>最后，需要在阿里云的控制台中找到安全组规则配置页面，将27017端口开放</p>
<p><img src="https://silencewanghui.github.io/images/部署02.png" alt="部署02"></p>
<p>推荐一款比较好用MongoDB客户端，<a href="https://mongobooster.com/" target="_blank" rel="external">mongobooster</a></p>
</li>
</ol>
<h4 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h4><ol>
<li><p>进入 /etc/yum.repos.d/，创建文件 nginx.repo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd /etc/yum.repos.d</div><div class="line">vi nginx.repo</div><div class="line">将下面的内容写入到 nginx.repo</div><div class="line">[nginx]</div><div class="line">name=nginx repo</div><div class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure>
</li>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx</div></pre></td></tr></table></figure>
</li>
<li><p>安装完成之后，执行如下命令查看安装位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iz2ze2pp5x5s9w6jcr1ndxz /]# whereis nginx</div><div class="line">nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz</div></pre></td></tr></table></figure>
</li>
<li><p>配置反向代理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<p>将配置文件中的 server 选项如下配置</p>
<p><img src="https://silencewanghui.github.io/images/部署03.png" alt="部署03"></p>
<p>这里监听的是默认端口80，你也可以改成其他端口，不过切记，如果是云服务器的网络是专有网络，一定要在阿里云控制台配置对应端口的安全组规则。</p>
</li>
<li><p>开放防火墙中的某些端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#查看所有打开的端口</div><div class="line">firewall-cmd --zone=public --list-ports</div></pre></td></tr></table></figure>
<p><img src="https://silencewanghui.github.io/images/部署04.png" alt="部署04"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#加入一个端口到区域</div><div class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</div><div class="line">firewall-cmd --zone=public --add-port=27017/tcp --permanent</div><div class="line">#加上 --permanent 表示永久生效，否则在服务器重启后改规则失效</div></pre></td></tr></table></figure>
</li>
<li><p>常用命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/usr/sbin/nginx #启动Nginx服务</div><div class="line">/usr/sbin/nginx -s stop #关闭Nginx服务</div><div class="line">/usr/sbin/nginx -t #检测Nginx的配置文件是否正确</div><div class="line">/usr/sbin/nginx -s reload #重启Nginx服务</div><div class="line">/etc/nginx/nginx.conf #Nginx配置文件位置</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>至此，如果不出什么意外的话，Node + MongoDB + Nginx 的环境应该就部署好了，在此作为一个记录，也希望能够帮助到有此需求的朋友。</p>
<h2 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h2><ol>
<li>[<a href="https://segmentfault.com/a/1190000004051670" target="_blank" rel="external">把Node.js项目部署到阿里云服务器（CentOs）</a></li>
<li><a href="http://www.jianshu.com/p/c09342b7f64c" target="_blank" rel="external">centos6.5部署mongodb 3安装配置</a></li>
<li><a href="https://github.com/dwqs/blog/issues/6" target="_blank" rel="external">Node+React小爬虫：从开发到部署</a></li>
<li>[<a href="http://www.cnblogs.com/hantianwei/p/5736278.html" target="_blank" rel="external">Centos 7防火墙firewalld开放80端口</a>]</li>
</ol>
<p><img src="https://silencewanghui.github.io/images/WX.jpg" alt="WX"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-部署环境&quot;&gt;&lt;a href=&quot;#1-部署环境&quot; class=&quot;headerlink&quot; title=&quot;1. 部署环境&quot;&gt;&lt;/a&gt;1. 部署环境&lt;/h2&gt;&lt;p&gt;我是在阿里云上以极低的价格（9元–半年）买的专有网络的云服务器，配置是：CPU 1核，内存 1GB，操作
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>vue-plugin 学习笔记</title>
    <link href="http://yoursite.com/2017/07/18/vue-plugin/"/>
    <id>http://yoursite.com/2017/07/18/vue-plugin/</id>
    <published>2017-07-18T11:57:23.000Z</published>
    <updated>2017-07-18T06:00:29.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>简介部分的内容大部分摘自 <a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="external">Vue.js中文网</a>，因为我觉得官网的介绍十分精简，可以跳过以下的简介部分直接去官网查看。</p>
<h3 id="1-1-开发插件"><a href="#1-1-开发插件" class="headerlink" title="1.1 开发插件"></a>1.1 开发插件</h3><p>vue-plugin 属于 Vue 的插件范畴，通常会为 Vue  添加全局功能。插件的开发方式官网上提出一般为以下几种:</p>
<ol>
<li>添加全局方法或者属性，如: <a href="https://github.com/karol-f/vue-custom-element" target="_blank" rel="external">vue-element</a></li>
<li>添加全局资源：指令/过滤器/过渡等，如 <a href="https://github.com/vuejs/vue-touch" target="_blank" rel="external">vue-touch</a></li>
<li>通过全局 mixin方法添加一些组件选项，如: <a href="https://github.com/vuejs/vuex" target="_blank" rel="external">vuex</a></li>
<li>添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。</li>
<li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能，如 <a href="https://github.com/vuejs/vue-router" target="_blank" rel="external">vue-router</a></li>
</ol>
<p>在插件的实现方面，Vue.js 的插件应当有一个公开方法 install ，该方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象（官方示例）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</div><div class="line">  <span class="comment">// 1. 添加全局方法或属性</span></div><div class="line">  Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 逻辑...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 2. 添加全局资源</span></div><div class="line">  Vue.directive(<span class="string">'my-directive'</span>, &#123;</div><div class="line">    bind (el, binding, vnode, oldVnode) &#123;</div><div class="line">      <span class="comment">// 逻辑...</span></div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="comment">// 3. 注入组件</span></div><div class="line">  Vue.mixin(&#123;</div><div class="line">    <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// 逻辑...</span></div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="comment">// 4. 添加实例方法</span></div><div class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="comment">// 逻辑...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-2-使用插件"><a href="#1-2-使用插件" class="headerlink" title="1.2 使用插件"></a>1.2 使用插件</h3><p>首先需要通过 npm 将所需要的插件源码下载到项目的 node_modules 文件夹内，再通过 require 或者是 import 的方式引入该插件。最后通过 Vue.use() 使用插件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 调用 `MyPlugin.install(Vue)`</span></div><div class="line">Vue.use(MyPlugin)</div></pre></td></tr></table></figure>
<p>也可以传入一个选项对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.use(MyPlugin, &#123; <span class="attr">someOption</span>: <span class="literal">true</span> &#125;)</div></pre></td></tr></table></figure>
<p>Vue.use 会自动阻止注册相同插件多次，届时只会注册一次该插件。</p>
<p>刚刚所说的使用插件的方式是在模块环境中，如果你是在页面中直接通过<script></script>引入插件的源码的，并且 Vue 是全局变量的情况下，一些插件（如 vue-router ）是会自动调用 Vue.use() 的。</p>
<h2 id="2-插件实例"><a href="#2-插件实例" class="headerlink" title="2. 插件实例"></a>2. 插件实例</h2><h3 id="2-1-vue-custom-element"><a href="#2-1-vue-custom-element" class="headerlink" title="2.1 vue-custom-element"></a>2.1 vue-custom-element</h3><p>GitHub 地址：<a href="https://github.com/karol-f/vue-custom-element" target="_blank" rel="external">https://github.com/karol-f/vue-custom-element</a></p>
<p>vue-custom-element 是通过在 Vue 上添加全局方法，以此让我们可以使用自定义的标签。</p>
<h6 id="Custom-Element-HTML"><a href="#Custom-Element-HTML" class="headerlink" title="Custom Element HTML"></a>Custom Element HTML</h6><blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; &lt;widget-vue prop1=&quot;1&quot; prop2=&quot;string&quot; prop3=&quot;true&quot;&gt;&lt;/widget-vue&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h6 id="JavaScript-register-with-Vue-custom-element"><a href="#JavaScript-register-with-Vue-custom-element" class="headerlink" title="JavaScript - register with Vue-custom-element"></a>JavaScript - register with Vue-custom-element</h6><blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt; Vue.customElement(&apos;widget-vue&apos;, &#123;</div><div class="line">&gt;   props: [</div><div class="line">&gt;     &apos;prop1&apos;,</div><div class="line">&gt;     &apos;prop2&apos;,</div><div class="line">&gt;     &apos;prop3&apos;</div><div class="line">&gt;   ],</div><div class="line">&gt;   data: &#123;</div><div class="line">&gt;     message: &apos;Hello Vue!&apos;</div><div class="line">&gt;   &#125;,</div><div class="line">&gt;   template: &apos;&lt;p&gt;&#123;&#123; message &#125;&#125;, &#123;&#123; prop1  &#125;&#125;, &#123;&#123;prop2&#125;&#125;, &#123;&#123;prop3&#125;&#125;&lt;/p&gt;&apos;</div><div class="line">&gt; &#125;);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h6 id="JavaScript-element-API-usage"><a href="#JavaScript-element-API-usage" class="headerlink" title="JavaScript - element API usage"></a>JavaScript - element API usage</h6><blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; document.querySelector(&apos;widget-vue&apos;)[0].prop2 // get prop value</div><div class="line">&gt; document.querySelector(&apos;widget-vue&apos;)[0].prop2 = &apos;another string&apos; // set prop value</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>You can also change <code>&lt;widget-vue&gt;</code> HTML attributes and changes will be instantly reflected.</p>
</blockquote>
<p>上面是引用自 vue-custom-element 的 GitHub 上面的 README。</p>
<p>再看一下 vue-custom-element 中的一些代码片段：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> registerCustomElement <span class="keyword">from</span> <span class="string">'./utils/registerCustomElement'</span>;</div><div class="line"><span class="keyword">import</span> createVueInstance <span class="keyword">from</span> <span class="string">'./utils/createVueInstance'</span>;</div><div class="line"><span class="keyword">import</span> &#123; getProps, convertAttributeValue &#125; <span class="keyword">from</span> <span class="string">'./utils/props'</span>;</div><div class="line"><span class="keyword">import</span> &#123; camelize &#125; <span class="keyword">from</span> <span class="string">'./utils/helpers'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">Vue</span>) </span>&#123;</div><div class="line">  Vue.customElement = <span class="function"><span class="keyword">function</span> <span class="title">vueCustomElement</span>(<span class="params">tag, componentDefinition, options = &#123;&#125;</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> isAsyncComponent = <span class="keyword">typeof</span> componentDefinition === <span class="string">'function'</span>;</div><div class="line">    <span class="keyword">const</span> optionsProps = isAsyncComponent &amp;&amp; &#123; <span class="attr">props</span>: options.props || [] &#125;;</div><div class="line">    <span class="keyword">const</span> props = getProps(isAsyncComponent ? optionsProps : componentDefinition);</div><div class="line">    <span class="comment">// register Custom Element</span></div><div class="line">    <span class="keyword">const</span> CustomElement = registerCustomElement(tag, &#123;</div><div class="line">      constructorCallback() &#123;</div><div class="line">        <span class="keyword">typeof</span> options.constructorCallback === <span class="string">'function'</span> &amp;&amp; options.constructorCallback.call(<span class="keyword">this</span>);</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      connectedCallback() &#123;</div><div class="line">        <span class="keyword">const</span> asyncComponentPromise = isAsyncComponent &amp;&amp; componentDefinition();</div><div class="line">        <span class="keyword">const</span> isAsyncComponentPromise = asyncComponentPromise &amp;&amp; asyncComponentPromise.then &amp;&amp; <span class="keyword">typeof</span> asyncComponentPromise.then === <span class="string">'function'</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (isAsyncComponent &amp;&amp; !isAsyncComponentPromise) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Async component <span class="subst">$&#123;tag&#125;</span> do not returns Promise`</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.__detached__) &#123;</div><div class="line">          <span class="keyword">if</span> (isAsyncComponentPromise) &#123;</div><div class="line">            asyncComponentPromise.then(<span class="function">(<span class="params">lazyLoadedComponent</span>) =&gt;</span> &#123;</div><div class="line">              <span class="keyword">const</span> lazyLoadedComponentProps = getProps(lazyLoadedComponent);</div><div class="line">              createVueInstance(<span class="keyword">this</span>, Vue, lazyLoadedComponent, lazyLoadedComponentProps, options);</div><div class="line">            &#125;);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            createVueInstance(<span class="keyword">this</span>, Vue, componentDefinition, props, options);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.__detached__ = <span class="literal">false</span>;</div><div class="line">      &#125;,</div><div class="line">      </div><div class="line">......</div><div class="line">      </div><div class="line">export <span class="keyword">default</span> install;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</div><div class="line">  <span class="built_in">window</span>.Vue.use(install);</div><div class="line">  <span class="keyword">if</span> (install.installed) &#123;</div><div class="line">    install.installed = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到 vue-custom-element 在 Vue 上添加了一个 customElement 的全局方法，并且暴露了 install 方法接收 Vue 的构造器。最后通过检查是否存在 Vue 全局变量，来调用 Vue.use() 实现插件的注册。</p>
<h3 id="2-2-vue-touch"><a href="#2-2-vue-touch" class="headerlink" title="2.2 vue-touch"></a>2.2 vue-touch</h3><p>GitHub 地址：<a href="https://github.com/vuejs/vue-touch" target="_blank" rel="external">https://github.com/vuejs/vue-touch</a></p>
<p>vue-touch 是一个在 Vue 项目中使用的对于 touch 事件处理的库，它是基于 Hammer.js 2.0 。</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h4 id="Using-the-v-touch-directive"><a href="#Using-the-v-touch-directive" class="headerlink" title="Using the v-touch directive"></a>Using the <code>v-touch</code> directive</h4><blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; &lt;a v-touch:tap=&quot;onTap&quot;&gt;Tap me!&lt;/a&gt;</div><div class="line">&gt;</div><div class="line">&gt; &lt;div v-touch:swipeleft=&quot;onSwipeLeft&quot;&gt;Swipe me!&lt;/div&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="Configuring-Recognizer-Options"><a href="#Configuring-Recognizer-Options" class="headerlink" title="Configuring Recognizer Options"></a>Configuring Recognizer Options</h4><blockquote>
<p>There are two ways to customize recognizer options such as <code>direction</code> and <code>threshold</code>. The first one is setting global options:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; // change the threshold for all swipe recognizers</div><div class="line">&gt; VueTouch.config.swipe = &#123;</div><div class="line">&gt;   threshold: 200</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>Or, you can use the <code>v-touch-options</code> directive to configure the behavior on a specific element:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; &lt;!-- detect only horizontal pans with a threshold of 100 --&gt;</div><div class="line">&gt; &lt;a</div><div class="line">&gt;   v-touch:pan=&quot;onPan&quot;</div><div class="line">&gt;   v-touch-options:pan=&quot;&#123; direction: &apos;horizontal&apos;, threshold: 100 &#125;&quot;&gt;</div><div class="line">&gt; &lt;/a&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="Registering-Custom-Events"><a href="#Registering-Custom-Events" class="headerlink" title="Registering Custom Events"></a>Registering Custom Events</h4><blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; // example registering a custom doubletap event.</div><div class="line">&gt; // the `type` indicates the base recognizer to use from Hammer</div><div class="line">&gt; // all other options are Hammer recognizer options.</div><div class="line">&gt; VueTouch.registerCustomEvent(&apos;doubletap&apos;, &#123;</div><div class="line">&gt;   type: &apos;tap&apos;,</div><div class="line">&gt;   taps: 2</div><div class="line">&gt; &#125;)</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; &lt;a v-touch:doubletap=&quot;onDoubleTap&quot;&gt;&lt;/a&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>See <a href="http://hammerjs.github.io/getting-started/" target="_blank" rel="external">Hammer.js documentation</a> for all available events.<br>See <code>/example</code> for a multi-event demo. To build it, run <code>npm install &amp;&amp; npm run build</code>.</p>
</blockquote>
<p>上面是引用自 vue-touch 的 README.</p>
<p>下面是一些代码片段：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">vueTouch.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</div><div class="line"></div><div class="line">    Vue.directive(<span class="string">'touch'</span>, &#123;</div><div class="line"></div><div class="line">      <span class="attr">isFn</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">acceptStatement</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">priority</span>: Vue.directive(<span class="string">'on'</span>).priority,</div><div class="line"></div><div class="line">      <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.el.hammer) &#123;</div><div class="line">          <span class="keyword">this</span>.el.hammer = <span class="keyword">new</span> Hammer.Manager(<span class="keyword">this</span>.el)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> mc = <span class="keyword">this</span>.mc = <span class="keyword">this</span>.el.hammer</div><div class="line">        <span class="comment">// determine event type</span></div><div class="line">        <span class="keyword">var</span> event = <span class="keyword">this</span>.arg</div><div class="line">        <span class="keyword">if</span> (!event) &#123;</div><div class="line">          <span class="built_in">console</span>.warn(<span class="string">'[vue-touch] event type argument is required.'</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> recognizerType, recognizer</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (customEvents[event]) &#123;</div><div class="line">          <span class="comment">// custom event</span></div><div class="line">          <span class="keyword">var</span> custom = customEvents[event]</div><div class="line">          recognizerType = custom.type</div><div class="line">          recognizer = <span class="keyword">new</span> Hammer[capitalize(recognizerType)](custom)</div><div class="line">          recognizer.recognizeWith(mc.recognizers)</div><div class="line">          mc.add(recognizer)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// built-in event</span></div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; gestures.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (event.indexOf(gestures[i]) === <span class="number">0</span>) &#123;</div><div class="line">              recognizerType = gestures[i]</div><div class="line">              <span class="keyword">break</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">if</span> (!recognizerType) &#123;</div><div class="line">            <span class="built_in">console</span>.warn(<span class="string">'[vue-touch] invalid event type: '</span> + event)</div><div class="line">            <span class="keyword">return</span></div><div class="line">          &#125;</div><div class="line">          recognizer = mc.get(recognizerType)</div><div class="line">          <span class="keyword">if</span> (!recognizer) &#123;</div><div class="line">            <span class="comment">// add recognizer</span></div><div class="line">            recognizer = <span class="keyword">new</span> Hammer[capitalize(recognizerType)]()</div><div class="line">            <span class="comment">// make sure multiple recognizers work together...</span></div><div class="line">            recognizer.recognizeWith(mc.recognizers)</div><div class="line">            mc.add(recognizer)</div><div class="line">          &#125;</div><div class="line">          <span class="comment">// apply global options</span></div><div class="line">          <span class="keyword">var</span> globalOptions = vueTouch.config[recognizerType]</div><div class="line">          <span class="keyword">if</span> (globalOptions) &#123;</div><div class="line">            guardDirections(globalOptions)</div><div class="line">            recognizer.set(globalOptions)</div><div class="line">          &#125;</div><div class="line">          <span class="comment">// apply local options</span></div><div class="line">          <span class="keyword">var</span> localOptions =</div><div class="line">            <span class="keyword">this</span>.el.hammerOptions &amp;&amp;</div><div class="line">            <span class="keyword">this</span>.el.hammerOptions[recognizerType]</div><div class="line">          <span class="keyword">if</span> (localOptions) &#123;</div><div class="line">            guardDirections(localOptions)</div><div class="line">            recognizer.set(localOptions)</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.recognizer = recognizer</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> mc = <span class="keyword">this</span>.mc</div><div class="line">        <span class="keyword">var</span> event = <span class="keyword">this</span>.arg</div><div class="line">        <span class="comment">// teardown old handler</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handler) &#123;</div><div class="line">          mc.off(event, <span class="keyword">this</span>.handler)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</div><div class="line">          <span class="keyword">this</span>.handler = <span class="literal">null</span></div><div class="line">          <span class="built_in">console</span>.warn(</div><div class="line">            <span class="string">'[vue-touch] invalid handler function for v-touch: '</span> +</div><div class="line">            <span class="keyword">this</span>.arg + <span class="string">'="'</span> + <span class="keyword">this</span>.descriptor.raw</div><div class="line">          )</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          mc.on(event, (<span class="keyword">this</span>.handler = fn))</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      <span class="attr">unbind</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handler) &#123;</div><div class="line">          <span class="keyword">this</span>.mc.off(<span class="keyword">this</span>.arg, <span class="keyword">this</span>.handler)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.mc.handlers).length) &#123;</div><div class="line">          <span class="keyword">this</span>.mc.destroy()</div><div class="line">          <span class="keyword">this</span>.el.hammer = <span class="literal">null</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    Vue.directive(<span class="string">'touch-options'</span>, &#123;</div><div class="line">      <span class="attr">priority</span>: Vue.directive(<span class="string">'on'</span>).priority + <span class="number">1</span>,</div><div class="line">      <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> opts = <span class="keyword">this</span>.el.hammerOptions || (<span class="keyword">this</span>.el.hammerOptions = &#123;&#125;)</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.arg) &#123;</div><div class="line">          <span class="built_in">console</span>.warn(<span class="string">'[vue-touch] recognizer type argument for v-touch-options is required.'</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          opts[<span class="keyword">this</span>.arg] = options</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">......</div></pre></td></tr></table></figure>
<p>其中用到了 Vue 中关于自定义指令的部分。自定义指令主要是在我们需要对 DOM 进行一些直接操作时所用的方法，指令定义函数提供了几个钩子函数（可选）：</p>
<ul>
<li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li>
<li><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li>
<li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li>
<li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li>
<li><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li>
</ul>
<p>这些钩子函数会被传入一些参数，以便我们对所绑定元素进行一些 DOM 操作和 对虚拟节点的一些数据操作。详细的参数如下：</p>
<ul>
<li><p><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 DOM 。</p>
</li>
<li><p>binding</p>
<p>: 一个对象，包含以下属性：</p>
<ul>
<li><strong>name</strong>: 指令名，不包括 <code>v-</code> 前缀。</li>
<li><strong>value</strong>: 指令的绑定值， 例如： <code>v-my-directive=&quot;1 + 1&quot;</code>, value 的值是 <code>2</code>。</li>
<li><strong>oldValue</strong>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>
<li><strong>expression</strong>: 绑定值的字符串形式。 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> ， expression 的值是 <code>&quot;1 + 1&quot;</code>。</li>
<li><strong>arg</strong>: 传给指令的参数。例如 <code>v-my-directive:foo</code>， arg 的值是 <code>&quot;foo&quot;</code>。</li>
<li><strong>modifiers</strong>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 modifiers 的值是 <code>{ foo: true, bar: true }</code>。</li>
</ul>
</li>
<li><p><strong>vnode</strong>: Vue 编译生成的虚拟节点，查阅 <a href="https://cn.vuejs.org/v2/api/#VNode接口" target="_blank" rel="external">VNode API</a> 了解更多详情。</p>
</li>
<li><p><strong>oldVnode</strong>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</p>
</li>
</ul>
<h3 id="2-3-vuex"><a href="#2-3-vuex" class="headerlink" title="2.3 vuex"></a>2.3 vuex</h3><p>GitHub 地址：<a href="https://github.com/vuejs/vuex" target="_blank" rel="external">https://github.com/vuejs/vuex</a></p>
<p>vuex 为 Vue.js 应用提供了一个集中式状态管理的解决方案，几乎是大中型 Vue 应用的必备解决方案。它采用的是通过全局 mixin 方法添加一些组件选项。以下是截取的一个源码片段：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> version = <span class="built_in">Number</span>(Vue.version.split(<span class="string">'.'</span>)[<span class="number">0</span>])</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (version &gt;= <span class="number">2</span>) &#123;</div><div class="line">    Vue.mixin(&#123; <span class="attr">beforeCreate</span>: vuexInit &#125;)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// override init and inject vuex init procedure</span></div><div class="line">    <span class="comment">// for 1.x backwards compatibility.</span></div><div class="line">    <span class="keyword">const</span> _init = Vue.prototype._init</div><div class="line">    Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options = &#123;&#125;</span>) </span>&#123;</div><div class="line">      options.init = options.init</div><div class="line">        ? [vuexInit].concat(options.init)</div><div class="line">        : vuexInit</div><div class="line">      _init.call(<span class="keyword">this</span>, options)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Vuex init hook, injected into each instances init hooks list.</div><div class="line">   */</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">vuexInit</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</div><div class="line">    <span class="comment">// store injection</span></div><div class="line">    <span class="keyword">if</span> (options.store) &#123;</div><div class="line">      <span class="keyword">this</span>.$store = <span class="keyword">typeof</span> options.store === <span class="string">'function'</span></div><div class="line">        ? options.store()</div><div class="line">        : options.store</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</div><div class="line">      <span class="keyword">this</span>.$store = options.parent.$store</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中用到了 Vue 插件的一种实现方式：<a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="external">mixin（混合）</a></p>
<blockquote>
<p>混合是一种灵活的分布式复用 Vue 组件的方式。混合对象可以包含任意组件选项。以组件使用混合对象时，所有混合对象的选项将被混入该组件本身的选项。</p>
</blockquote>
<p>官网的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义一个混合对象</span></div><div class="line"><span class="keyword">var</span> myMixin = &#123;</div><div class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.hello()</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="attr">hello</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'hello from mixin!'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义一个使用混合对象的组件</span></div><div class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</div><div class="line">  <span class="attr">mixins</span>: [myMixin]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> Component() <span class="comment">// -&gt; "hello from mixin!"</span></div></pre></td></tr></table></figure>
<p>从某种层面上来讲，混合可以理解成是组件的代码片段，它和组件进行混用的时候有一些特殊的合并规则。</p>
<h4 id="2-3-1-选项合并"><a href="#2-3-1-选项合并" class="headerlink" title="2.3.1 选项合并"></a>2.3.1 选项合并</h4><blockquote>
<p>当组件和混合对象含有同名选项时，这些选项将以恰当的方式混合。比如，同名钩子函数将混合为一个数组，因此都将被调用。另外，混合对象的 钩子将在组件自身钩子 <strong>之前</strong> 调用 。</p>
</blockquote>
<p>官网的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mixin = &#123;</div><div class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'混合对象的钩子被调用'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">mixins</span>: [mixin],</div><div class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'组件钩子被调用'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// -&gt; "混合对象的钩子被调用"</span></div><div class="line"><span class="comment">// -&gt; "组件钩子被调用"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>值为对象的选项，例如 <code>methods</code>, <code>components</code> 和 <code>directives</code>，将被混合为同一个对象。 两个对象键名冲突时，取组件对象的键值对。</p>
</blockquote>
<p>官网的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mixin = &#123;</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'foo'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">conflicting</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'from mixin'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">mixins</span>: [mixin],</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'bar'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">conflicting</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'from self'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">vm.foo() <span class="comment">// -&gt; "foo"</span></div><div class="line">vm.bar() <span class="comment">// -&gt; "bar"</span></div><div class="line">vm.conflicting() <span class="comment">// -&gt; "from self"</span></div></pre></td></tr></table></figure>
<h4 id="2-3-2-全局混合"><a href="#2-3-2-全局混合" class="headerlink" title="2.3.2 全局混合"></a>2.3.2 全局混合</h4><blockquote>
<p>也可以全局注册混合对象。 注意使用！ 一旦使用全局混合对象，将会影响到 <strong>所有</strong> 之后创建的 Vue 实例。使用恰当时，可以为自定义对象注入处理逻辑。</p>
</blockquote>
<p>官网的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 为自定义的选项 'myOption' 注入一个处理器。 </span></div><div class="line">Vue.mixin(&#123;</div><div class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> myOption = <span class="keyword">this</span>.$options.myOption</div><div class="line">    <span class="keyword">if</span> (myOption) &#123;</div><div class="line">      <span class="built_in">console</span>.log(myOption)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">myOption</span>: <span class="string">'hello!'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// -&gt; "hello!"</span></div></pre></td></tr></table></figure>
<h4 id="2-3-3-自定义混合策略"><a href="#2-3-3-自定义混合策略" class="headerlink" title="2.3.3 自定义混合策略"></a>2.3.3 自定义混合策略</h4><p>这种混合方式不是很明白，以下是官方文档：</p>
<blockquote>
<p>自定义选项混合策略<br>自定义选项将使用默认策略，即简单地覆盖已有值。 如果想让自定义选项以自定义逻辑混合，可以向 <code>Vue.config.optionMergeStrategies</code> 添加一个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; Vue.config.optionMergeStrategies.myOption = function (toVal, fromVal) &#123;</div><div class="line">&gt;   // return mergedVal</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>对于大多数对象选项，可以使用 <code>methods</code> 的合并策略:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; var strategies = Vue.config.optionMergeStrategies</div><div class="line">&gt; strategies.myOption = strategies.methods</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>更多高级的例子可以在 <a href="https://github.com/vuejs/vuex" target="_blank" rel="external">Vuex</a> 1.x的混合策略里找到:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt; const merge = Vue.config.optionMergeStrategies.computed</div><div class="line">&gt; Vue.config.optionMergeStrategies.vuex = function (toVal, fromVal) &#123;</div><div class="line">&gt;   if (!toVal) return fromVal</div><div class="line">&gt;   if (!fromVal) return toVal</div><div class="line">&gt;   return &#123;</div><div class="line">&gt;     getters: merge(toVal.getters, fromVal.getters),</div><div class="line">&gt;     state: merge(toVal.state, fromVal.state),</div><div class="line">&gt;     actions: merge(toVal.actions, fromVal.actions)</div><div class="line">&gt;   &#125;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>关于 mixin 的使用姿势，请阅读这篇文章：<a href="http://zcfy.cc/article/using-mixins-in-vue-js-css-tricks-3257.html?t=new" target="_blank" rel="external">在 Vue.js 中使用Mixin —— CSS-Tricks</a></p>
<h3 id="2-4-vue-router"><a href="#2-4-vue-router" class="headerlink" title="2.4 vue-router"></a>2.4 vue-router</h3><p>GitHub 地址：<a href="https://github.com/vuejs/vue-router" target="_blank" rel="external">https://github.com/vuejs/vue-router</a></p>
<p>vue-router 是 Vue 应用官方推荐的路由解决方案，与 Vue.js 结合去构建单页应用。</p>
<p>截取了一小段源码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line">  Vue.mixin(&#123;</div><div class="line">    beforeCreate () &#123;</div><div class="line">      <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123;</div><div class="line">        <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span></div><div class="line">        <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router</div><div class="line">        <span class="keyword">this</span>._router.init(<span class="keyword">this</span>)</div><div class="line">        Vue.util.defineReactive(<span class="keyword">this</span>, <span class="string">'_route'</span>, <span class="keyword">this</span>._router.history.current)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>._routerRoot = (<span class="keyword">this</span>.$parent &amp;&amp; <span class="keyword">this</span>.$parent._routerRoot) || <span class="keyword">this</span></div><div class="line">      &#125;</div><div class="line">      registerInstance(<span class="keyword">this</span>, <span class="keyword">this</span>)</div><div class="line">    &#125;,</div><div class="line">    destroyed () &#123;</div><div class="line">      registerInstance(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$router'</span>, &#123;</div><div class="line">    get () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._router &#125;</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$route'</span>, &#123;</div><div class="line">    get () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._route &#125;</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  Vue.component(<span class="string">'router-view'</span>, View)</div><div class="line">  Vue.component(<span class="string">'router-link'</span>, Link)</div><div class="line"></div><div class="line">  <span class="keyword">const</span> strats = Vue.config.optionMergeStrategies</div><div class="line">  <span class="comment">// use the same hook merging strategy for route hooks</span></div><div class="line">  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created</div></pre></td></tr></table></figure>
<p>可以看到 vue-rouer 在 Vue.prototype 上面添加了自定义的对象，这只是其中能够体现 vue-router 扩展插件的一小部分，vue-rouer 用到了文章上部分讲的开发插件的各种方式。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要是简单介绍了关于 Vue 插件的基本概念以及其实现的几种形式，内容大部分摘自 <a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="external">Vue.js 中文网</a>。</p>
<p>关于插件的理解，个人觉得主要是从实践中去进行理解，因此，本文主要是做概念上的简单介绍。<br>学习时写了个很小的 <a href="https://github.com/Silencewanghui/vue-plugin-demo" target="_blank" rel="external">demo</a> 作为练习。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;简介部分的内容大部分摘自 &lt;a href=&quot;https://cn.vuejs.org/v2/guide/plugins.
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>防抖动、节流阀与rAF</title>
    <link href="http://yoursite.com/2017/06/19/%E9%98%B2%E6%8A%96%E5%8A%A8%E3%80%81%E8%8A%82%E6%B5%81%E9%98%80%E4%B8%8ErAF/"/>
    <id>http://yoursite.com/2017/06/19/防抖动、节流阀与rAF/</id>
    <published>2017-06-19T14:57:18.000Z</published>
    <updated>2017-06-19T07:01:44.816Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>在 web 开发中，经常会对一些事件进行监听处理，从而达到我们需要的一些效果。但是某些事件触发特别频繁，如浏览器窗口的 resize 事件以及页面的滚动事件。如此频繁的事件监听以及处理函数的多次执行，势必会带来性能上不必要的损失和欠佳的用户体验。</p>
<p>因此，今天就初探一下类似问题的解决办法：防抖动（Debounce ）、节流阀（Throttle）和 requestAnimationFrame。</p>
<h4 id="2-防抖动（Debounce）"><a href="#2-防抖动（Debounce）" class="headerlink" title="2.防抖动（Debounce）"></a>2.防抖动（Debounce）</h4><p>简单来说，防抖动技术就是把触发非常频繁的事件合并成一次执行。</p>
<p>先看一下代码实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> timeID = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 首先是清空定时器</span></div><div class="line">    clearTimeout(timeID);</div><div class="line">    <span class="comment">// 延迟 wait ms后执行真正的事件处理函数</span></div><div class="line">    timeID = setTimeOut(func, wait);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hanlder</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hanlde the scroll event.'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounce(hanlder, <span class="number">400</span>));</div></pre></td></tr></table></figure>
<p>简要解释一下，如果在400ms内连续触发 scroll 事件，那么真正的事件处理是不会执行的。只有当快速的事件触发停止以后，处理函数才会执行，也就是说 debounce 函数将多次的事件触发合并成了一次。</p>
<h4 id="3-节流阀（Throttle）"><a href="#3-节流阀（Throttle）" class="headerlink" title="3.节流阀（Throttle）"></a>3.节流阀（Throttle）</h4><p>节流函数，只允许一个函数在规定的时间内执行一次。</p>
<p>它和防抖动最大的区别就是，节流函数是不管事件触发有多频繁，都会保证在规定事件内必须执行一次真正的事件处理函数。因此，有些场景下，就不能够使用防抖动技术，转而用节流阀代替。</p>
<p>比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流阀技术来实现。代码实例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span> (<span class="params">func, wait</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> timeout,</div><div class="line">      context,</div><div class="line">      args,</div><div class="line">      startTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> curTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">    <span class="keyword">var</span> remaining = wait - (curTime - startTime);</div><div class="line">    context = <span class="keyword">this</span>;</div><div class="line">    args = <span class="built_in">arguments</span>;</div><div class="line">    </div><div class="line">    clearTimeout(timeout);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(remaining &lt;= <span class="number">0</span>)&#123;</div><div class="line">      func.apply(context, args);</div><div class="line">      startTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      timeout = setTimeout(func, remaining);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="4-requestAnimationFrame"><a href="#4-requestAnimationFrame" class="headerlink" title="4.requestAnimationFrame"></a>4.requestAnimationFrame</h4><blockquote>
<p><strong>window.requestAnimationFrame() </strong>方法告诉浏览器您希望执行动画，并请求浏览器调用指定的函数在下一次重绘之前更新动画。该方法将在重绘之前调用的回调作为参数。</p>
<p>如果你想做逐帧动画的时候，你应该用这个方法。这就要求你的动画函数执行会先于浏览器重绘动作。通常来说，被调用的频率是每秒60次，但是一般会遵循W3C标准规定的频率。如果是后台标签页面，重绘频率则会大大降低。</p>
</blockquote>
<p>代码实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">timeStamp</span>)</span>&#123;</div><div class="line">  <span class="comment">// 执行动画一帧所需要的计算工作</span></div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">requestAnimationFrame(update)</div></pre></td></tr></table></figure>
<p>回调函数会被传入一个时间戳作为参数，该参数指示出回调函数将被触发的时间。</p>
<p>简单来说 rAF 会在浏览器渲染的下一帧执行动画所需的计算操作，而且执行的频率与显示器的刷新率保持一致，</p>
<p>这样就避免了我们使用定时器时由于指定的间隔时间太长或太短引起的动画掉帧或卡顿的问题。</p>
<p>浏览器兼容方面，IE 10.0及以上支持。</p>
<h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><p>第一次写博客，自我感觉对于技术的剖析很浅，没有达到自己理想的效果。慢慢来吧，再接再厉，参考文章列表里的都是一些非常优秀的文章，大家可以仔细阅读。</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol>
<li><a href="https://github.com/chokcoco/cnblogsArticle/issues/12" target="_blank" rel="external">【前端性能】高性能滚动 scroll 及页面渲染优化</a></li>
<li><a href="http://jinlong.github.io/2016/04/24/Debouncing-and-Throttling-Explained-Through-Examples/" target="_blank" rel="external">实例解析防抖动（Debouncing）和节流阀（Throttling）</a></li>
<li><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering" target="_blank" rel="external">Javascript高性能动画与页面渲染</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h4&gt;&lt;p&gt;在 web 开发中，经常会对一些事件进行监听处理，从而达到我们需要的一些效果。但是某些事件触发特别频繁，如浏览器窗口的 re
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>First One</title>
    <link href="http://yoursite.com/2017/06/08/First-One/"/>
    <id>http://yoursite.com/2017/06/08/First-One/</id>
    <published>2017-06-07T16:18:28.000Z</published>
    <updated>2017-06-07T08:19:15.461Z</updated>
    
    <content type="html"><![CDATA[<p>博客初始搭建完成，以后会在这里写一些技术上的知识学习以及工作中的踩坑记录。<br>Keep Moving.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客初始搭建完成，以后会在这里写一些技术上的知识学习以及工作中的踩坑记录。&lt;br&gt;Keep Moving.&lt;/p&gt;

    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
